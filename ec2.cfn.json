{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Creates EC2 instance, Security Group, SG Rules, ebs volumes",
	"Parameters": {
  	"Environment": {
           "Type": "String",
           "Default": "dev",
           "AllowedValues" : ["dev", "qa", "stg", "prod", "poc"],
           "Description": "The environment in which the resources are to be provisioned"
		},
		"EnableInstanceTerminationProtection": {
			"Type": "String",
			"Default": "true",
			"AllowedValues" : ["true", "false"],
			"Description": "Instance termination protection"
		},
		"VolumeDeleteOnInstanceTermination": {
			"Type": "String",
			"Default": "false",
			"AllowedValues" : ["true", "false"],
			"Description": "Delete EBS Volumes on Instance Termination"
		},
		"Ec2InstanceRoleName": {
			"Type": "String",
			"Default": "Ec2RStudioDevRole",
			"Description": "The name of the ec2 instance role e.g. Ec2RStudioDevRole"
		},
		"AMI": {
			"Type": "AWS::EC2::Image::Id",
			"Default": "ami-0e524e75",
			"Description": "AMI Id , e.g. ami-0e524e75 , ami-d59aa3af"
		},
		"InstanceType": {
			"Type": "String",
			"Description": "EC2 Instance Type , e.g. r5.xlarge"
		},
		"SubnetId": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Subnet Id, e.g. subnet-0bad1c26"
		},
		"Application": {
			"Type": "String",
			"Description": "The value of Tag Key:Application, e.g. RStudio"
		},
		"Hostname": {
			"Type": "String",
			"Description": "The value of Tag Key:Name, e.g. amzrstdev01"
		},
		"OS": {
			"Type": "String",
			"Default": "RedHatLinux",
			"Description": "The value of Tag Key:OS, e.g. RedHatLinux"
		},
		"DailySnapshot": {
			"Type": "String",
			"Default": "True",
			"Description": "The value of Tag Key:Daily-Snapshot, e.g. True"
		},
		"RootVolumeSize": {
			"Type": "Number",
			"Description": "The root volume size in Gigs, eg. 128 "
		},
		"AppVolumeSize": {
			"Type": "Number",
			"Description": "The app volume size in Gigs, eg. 128 "
		},
		"EbsKmsKeyId": {
			"Type": "String",
			"Description": "KMS key to be used to encrypt the volumes"
		},
		"EbsVolumeType": {
			"Type": "String",
			"Description": "EBS Volume Type , e.g. gp2"
		},
		"SecurityGroupIdsDefault": {
			"Type": "List<AWS::EC2::SecurityGroup::Id>",
			"Default": "sg-b503cac9,sg-9a579ce5",
			"Description": "List of default Security Group Ids"
		}
	},
	"Mappings": {
		"EnvironmentMap": {
			"dev": { "VpcId": "vpc-6057bd06" ,"SshKey": "TCO-NONPROD" , "InitCap": "Dev" },
			"qa": { "VpcId": "vpc-6057bd06", "SshKey": "TCO-NONPROD", "InitCap": "Qa" }, 
			"poc": { "VpcId": "vpc-6057bd06", "SshKey": "apathros", "InitCap": "Poc" },
			"prod": { "VpcId" :"vpc-f4682392", "SshKey": "TCO-PROD", "InitCap": "Prod" }
		},
		"VolumeResourceDeletionMap": {
			"true": { "Policy" : "Delete" },
			"false": { "Policy" : "Retain" }
		}
	},
	"Conditions" : { 
		"IfProd" : {"Fn::Equals" : [{"Ref" : "Environment"}, "prod"]},
		"IfNotProd" : {"Fn::Not" : [{"Fn::Equals" : [{"Ref" : "Environment"}, "prod" ]}]},
		"IfQa" : {"Fn::Not" : [{"Fn::Equals" : [{"Ref" : "Environment"}, "prod" ]}]}
	},
	"Resources": {
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": [ { "Ref": "Ec2InstanceRoleName"} ],
				"InstanceProfileName": {"Fn::Join": ["-",  [{ "Ref": "Hostname" } ,{ "Ref": "Ec2InstanceRoleName" }]]}
			}
		},
		"Ec2Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"DisableApiTermination": { "Ref": "EnableInstanceTerminationProtection"},
				"InstanceInitiatedShutdownBehavior": "stop",
				"EbsOptimized": "true",
				"IamInstanceProfile": { "Ref": "InstanceProfile"},
				"ImageId": { "Ref": "AMI"},
				"InstanceType": { "Ref": "InstanceType"},
				"KeyName":  { "Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"SshKey" ]},
				"Monitoring": "false",
				"SecurityGroupIds": {
					"Fn::Split": [ ",", { "Fn::Sub": [ "${SGIdList},sg-0d1e7cc34361e5e69", { "SGIdList": { "Fn::Join": [ ",", { "Ref": "SecurityGroupIdsDefault" } ] } } ] } ]
				},
				"SubnetId": { "Ref": "SubnetId"},
				"Tags": [
				{
					"Key": "Application",
					"Value": { "Ref": "Application"}
				},
				{
					"Key": "Name",
					"Value": { "Ref": "Hostname"}
				},
				{
					"Key": "OS",
					"Value": { "Ref": "OS"}
				}
				],
				"BlockDeviceMappings" : [
					{
						"DeviceName" : "/dev/sda1",
						"Ebs" : {
							"DeleteOnTermination" : { "Ref": "VolumeDeleteOnInstanceTermination" },
							"VolumeType" : { "Ref": "EbsVolumeType" },
							"VolumeSize" : { "Ref": "RootVolumeSize" }
						}
					}
				],
				"UserData" :{ "Fn::Base64" : { "Fn::Join" : ["\n", [
					"#!/bin/bash -xe",
					"exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1",
					"#create users with root privs",
					"for i in apathros ; do",
					"  useradd -m -G ssh_access $i",
					"  user_created=$(id -u $i > /dev/null 2>&1; echo $?)",
					"   mkdir -p /home/$i/.ssh",
					"   touch /home/$i/.ssh/authorized_keys",
					"   chown -R $i:$i /home/$i/.ssh",
					"   chmod 700 /home/$i/.ssh",
					"   chmod 600 /home/$i/.ssh/authorized_keys",
					"   #echo \"$i ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers",
					"   chage -I -1 -m 0 -M 99999 -E -1 $i",
					"done",
					"  echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key\" >> /home/apathros/.ssh/authorized_keys",
					"   echo -e \"\nUser_Alias ADMINS=apathros\" >> /etc/sudoers",
					"   echo -e \"\nADMINS ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers",
					"",
					"# Set Timezone",
					"timedatectl set-timezone America/New_York",
					"",
					"yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional",
					"yum update -y",
					"yum install zip unzip bind-utils traceroute lvm2 wget -y",
					"yum install nvme-cli -y",
					"",
					"",
					"# Install SSM Agent",
					"cd /tmp",
					"yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm",
					"systemctl enable amazon-ssm-agent",
					"systemctl start amazon-ssm-agent",
					"",
					"#Install AWS CLI",
					"cd /tmp",
					"curl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"",
					"unzip awscli-bundle.zip",
					"./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws",
					"rm ./awscli-bundle.zip",
					"rm -rf ./awscli-bundle",
					"",
					"#Install cloudwatch monitoring scripts",
					"yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo=\"rhui-REGION-rhel-server-optional\" -y",
					"cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon",
					"",
					"#Install packages for AD",
					"yum install -y sssd realmd krb5-workstation oddjob oddjob-mkhomedir samba-common-tools",
					"# Set Hostname",
					"region=\"us-east-1\"",
					"ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)",
					"host_name=$(/usr/local/bin/aws ec2 --region ${region}  describe-tags --filters Name=resource-id,Values=${ec2_instance_id} Name=key,Values=Name --query Tags[].Value --output text)",
					"hostnamectl set-hostname ${host_name}",
					"hostnamectl status",
					"#To persist the change",
					"echo \"preserve_hostname: true\" >> /etc/cloud/cloud.cfg",
					"reboot"
					]
						]
				}
				}
			}
		},
		"AppVolume" : {
			"Type" : "AWS::EC2::Volume",
			"DeletionPolicy" : "Retain",
			"Properties" : {
				"VolumeType" : { "Ref": "EbsVolumeType" },
				"Size" : { "Ref": "AppVolumeSize" },
				"Encrypted": true,
				"KmsKeyId" : { "Ref": "EbsKmsKeyId" },
				"AvailabilityZone" : { "Fn::GetAtt" : [ "Ec2Instance", "AvailabilityZone" ] },
				"Tags" : [ 
          {
            "Key": "Application",
            "Value": { "Ref": "Application" }
          },
          {
            "Key": "Name",
						"Value": {"Fn::Join": ["", [{ "Ref": "Hostname"}, " /app" ]]}
          }
				]
			}
		},
		"MountPoint" : {
			"Type" : "AWS::EC2::VolumeAttachment",
			"Properties" : {
				"InstanceId" : { "Ref" : "Ec2Instance" },
				"VolumeId"  : { "Ref" : "AppVolume" },
				"Device" : "/dev/sdf"
			}
		}     
	}
}
