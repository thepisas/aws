{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Creates the RStudio Stack including Ec2, Role, Instance Profile, Security Group, SG Rules and ebs volumes",
	"Parameters": {
  	"Environment": {
           "Type": "String",
           "Default": "dev",
           "AllowedValues" : ["dev", "qa", "stg", "prd", "poc"],
           "Description": " The environment in which the resources are to be provisioned"
		},
		"EnableInstanceTerminationProtection": {
			"Type": "String",
			"Default": "true",
			"AllowedValues" : ["true", "false"],
			"Description": "Instance termination protection"
		},
		"VolumeDeleteOnInstanceTermination": {
			"Type": "String",
			"Default": "false",
			"AllowedValues" : ["true", "false"],
			"Description": "Delete EBS Volumes on Instance Termination"
		},
		"Ec2InstanceRoleName": {
			"Type": "String",
			"Default": "Ec2RStudioDevRole",
			"Description": "The name of the ec2 instance role to be created e.g. Ec2RStudioDevRole"
		},
		"AMI": {
			"Type": "AWS::EC2::Image::Id",
			"Default": "ami-0e524e75",
			"Description": "AMI Id , e.g. ami-0e524e75 , ami-d59aa3af"
		},
		"InstanceType": {
			"Type": "String",
			"Description": "EC2 Instance Type , e.g. r5.xlarge"
		},
		"SubnetId": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Subnet Id, e.g. subnet-0bad1c26"
		},
		"Application": {
			"Type": "String",
			"Description": "The value of Tag Key:Application, e.g. RStudio"
		},
		"Hostname": {
			"Type": "String",
			"Description": "The value of Tag Key:Name, e.g. poc-amzrstdev01"
		},
		"OS": {
			"Type": "String",
			"Default": "RedHatLinux",
			"Description": "The value of Tag Key:OS, e.g. RedHatLinux"
		},
		"DailySnapshot": {
			"Type": "String",
			"Default": "True",
			"Description": "The value of Tag Key:Daily-Snapshot, e.g. True"
		},
		"RootVolumeSize": {
			"Type": "Number",
			"Description": "The root volume size in Gigs, eg. 50 "
		},
		"AppVolumeSize": {
			"Type": "Number",
			"Description": "The app volume size in Gigs, eg. 128 "
		},
		"SecurityGroupIdsDefault": {
			"Type": "List<AWS::EC2::SecurityGroup::Id>",
			"Default": "sg-b503cac9,sg-9a579ce5",
			"Description": "List of default Security Group Ids"
		},
		"SecurityGroup1Name": {
			"Type": "String",
			"Default": "RStudioDev",
			"Description": "Security Group to be created for RStudio Instances"
		},
		"SecurityGroup1Description": {
			"Type": "String",
			"Default": "Security Group for RStudio Instances",
			"Description": "Security Group description for RStudio Instances"
		}
	},
	"Mappings": {
		"EnvironmentMap": {
			"dev": { "AMI": "ami-0e524e75" , "VpcId": "vpc-6057bd06" ,"SshKey": "tco-nonproduction", "CamelCase": "Dev" },
			"qa": { "AMI": "ami-0e524e75", "VpcId": "vpc-6057bd06", "SshKey": "tco-nonproduction", "CamelCase": "Qa" },
			"poc": { "AMI": "ami-0e524e75", "VpcId": "vpc-6057bd06", "SshKey": "apathros", "CamelCase": "Poc" },
			"prod": { "AMI": "ami-d59aa3af", "VpcId" :"vpc-f4682392", "SshKey": "tco-production", "CamelCase": "Prod" }
		}
	},
	"Resources": {
		"IamPolicy": {
			"Type" : "AWS::IAM::Policy",
			"Properties" : {
				"PolicyName" : "Ec2S3AccessRStudioDevPolicy",
				"PolicyDocument" : {
					"Version" : "2012-10-17",
					 "Statement": [ {
						 "Effect"   : "Allow",
						 "Action"   : [ 
							 "s3:PutObject",
							 "s3:GetObject",
							 "s3:ListBucket",
							 "s3:ListObjects"
						 ],
						 "Resource" : [
						   { "Fn::Join": ["",  [ "arn:aws:s3:::PeopleSoftRStudio"  ,{"Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"CamelCase" ]}]]}, 
						   {"Fn::Join": ["",  [ "arn:aws:s3:::HyperionRStudio"  ,{"Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"CamelCase" ]}]]}, 
						   {"Fn::Join": ["",  [ "arn:aws:s3:::EDWRRStudio"  ,{"Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"CamelCase" ]}]]}, 
						   {"Fn::Join": ["",  [ "arn:aws:s3:::CountwiseRStudio"  ,{"Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"CamelCase" ]}]]}, 
						   {"Fn::Join": ["",  [ "arn:aws:s3:::KronosRStudio"  ,{"Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"CamelCase" ]}]]}, 
						   { "Fn::Join": ["",  [ "arn:aws:s3:::PeopleSoftRStudio"  ,{"Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"CamelCase" ]}, "/*"]]}, 
						   {"Fn::Join": ["",  [ "arn:aws:s3:::HyperionRStudio"  ,{"Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"CamelCase" ]} , "/*"]]}, 
						   {"Fn::Join": ["",  [ "arn:aws:s3:::EDWRRStudio"  ,{"Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"CamelCase" ]} , "/*"]]}, 
						   {"Fn::Join": ["",  [ "arn:aws:s3:::CountwiseRStudio"  ,{"Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"CamelCase" ]} , "/*"]]}, 
						   {"Fn::Join": ["",  [ "arn:aws:s3:::KronosRStudio"  ,{"Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"CamelCase" ]}  , "/*"]]}, 
						 ]
					 } ]
				},
      "Roles": [ { "Ref": "IamRole" } ]
			}
		},
		"IamRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": { "Ref": "Ec2InstanceRoleName" },
				"AssumeRolePolicyDocument": {
					"Version" : "2012-10-17",
					"Statement": [ {
						"Effect": "Allow",
						"Principal": {
							"Service": [ "ec2.amazonaws.com" ]
						},
						"Action": [ "sts:AssumeRole" ]
					} ]
				},
				"ManagedPolicyArns": ["arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess","arn:aws:iam::869052972610:policy/TCO_SSM_Policy_For_EC2","arn:aws:iam::869052972610:policy/EBS_Snapshots" ]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": [ { "Ref": "IamRole"} ],
				"InstanceProfileName": {"Fn::Join": ["-",  [{ "Ref": "Hostname" } ,{ "Ref": "Ec2InstanceRoleName" }]]}
				}
			},
		"Ec2Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"DisableApiTermination": { "Ref": "EnableInstanceTerminationProtection"},
				"InstanceInitiatedShutdownBehavior": "stop",
				"EbsOptimized": "true",
				"IamInstanceProfile": { "Ref": "InstanceProfile"},
				"ImageId": { "Ref": "AMI"},
				"InstanceType": { "Ref": "InstanceType"},
				"KeyName":  { "Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"SshKey" ]},
				"Monitoring": "false",
				"SecurityGroupIds": {
					"Fn::Split": [ ",", { "Fn::Sub": [ "${idList},${SecurityGroup1}", { "idList": { "Fn::Join": [ ",", { "Ref": "SecurityGroupIdsDefault" } ] } } ] } ]
				},
				"SubnetId": { "Ref": "SubnetId"},
				"Tags": [
				{
					"Key": "Application",
					"Value": { "Ref": "Application"}
				},
				{
					"Key": "Name",
					"Value": { "Ref": "Hostname"}
				},
				{
					"Key": "OS",
					"Value": { "Ref": "OS"}
				},
				{
					"Key": "Daily-Snapshot",
					"Value": { "Ref": "DailySnapshot"}
				}
				],
				"BlockDeviceMappings" : [
					{
						"DeviceName" : "/dev/sda1",
						"Ebs" : {
							"DeleteOnTermination" : { "Ref": "VolumeDeleteOnInstanceTermination" },
							"VolumeType" : "gp2",
							"VolumeSize" : { "Ref": "RootVolumeSize" }
						}
					},
					{
						"DeviceName" : "/dev/sdf",
						"Ebs" : {
							"DeleteOnTermination" : { "Ref": "VolumeDeleteOnInstanceTermination" },
							"Encrypted": true,
							"VolumeType" : "gp2",
							"VolumeSize" : { "Ref": "AppVolumeSize" }
						}
					}
				],
				"UserData" :{ "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash -xe\n",
					"exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1\n",
					"#create users with root privs\n",
					"for i in apathros ; do\n",
					"  useradd -m -G ssh_access $i\n",
					"  user_created=$(id -u $i > /dev/null 2>&1; echo $?)\n",
					"   mkdir -p /home/$i/.ssh\n",
					"   touch /home/$i/.ssh/authorized_keys\n",
					"   chown -R $i:$i /home/$i/.ssh\n",
					"   chmod 700 /home/$i/.ssh\n",
					"   chmod 600 /home/$i/.ssh/authorized_keys\n",
					"   echo \"$i ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers\n",
					"done\n",
					"  echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key\" >> /home/apathros/.ssh/authorized_keys\n",
					"\n",
					"# Set Timezone\n",
					"timedatectl set-timezone America/New_York\n",
					"\n",
					"yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional\n",
					"yum update -y\n",
					"yum install zip unzip bind-utils traceroute lvm2 wget -y\n",
					"yum install nvme-cli -y\n",
					"\n",
					"\n",
					"# Install SSM Agent\n",
					"cd /tmp\n",
					"yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\n",
					"systemctl enable amazon-ssm-agent\n",
					"systemctl start amazon-ssm-agent\n",
					"\n",
					"#Install AWS CLI\n",
					"cd /tmp\n",
					"curl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"\n",
					"unzip awscli-bundle.zip\n",
					"./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\n",
					"\n",
					"#Install cloudwatch monitoring scripts\n",
					"yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo=\"rhui-REGION-rhel-server-optional\" -y\n",
					"cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon\n",
					"\n",
					"# Set Hostname\n",
					"hostnamectl set-hostname $(/usr/local/bin/aws ec2 --region us-east-1  describe-tags --filters Name=resource-id,Values=`wget -q -O - http://169.254.169.254/latest/meta-data/instance-id` Name=key,Values=Name --query Tags[].Value --output text)\n",
					"#reboot"
					]
						]
				}
				}
			}
		},
		"SecurityGroup1": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupName" : { "Ref": "SecurityGroup1Name" },
				"GroupDescription" : {"Fn::Join": ["-",  [{ "Ref": "SecurityGroup1Description" } , { "Ref": "Environment" }]]},
				"VpcId":  { "Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"VpcId" ]},
				"Tags": [
				{
					"Key": "Application",
					"Value": { "Ref": "Application"}
				}
				]
			}
		},
		"SG1Ingress1": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Fn::GetAtt": [ "SecurityGroup1", "GroupId" ]},
				"IpProtocol": "tcp",
				"FromPort": "8787",
				"ToPort": "8787",
				"CidrIp": "10.160.0.0/16"
			}
		},
		"SG1Ingress2": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId":  { "Fn::GetAtt": [ "SecurityGroup1", "GroupId" ]},
				"IpProtocol": "tcp",
				"FromPort": "8787",
				"ToPort": "8787",
				"CidrIp": "10.255.0.0/16"
			}
		},
		"SG1Ingress3": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Fn::GetAtt": [ "SecurityGroup1", "GroupId" ]},
				"IpProtocol": "tcp",
				"FromPort": "8787",
				"ToPort": "8787",
				"CidrIp": "172.16.0.0/12"
			}
		},
		"SG1Ingress4": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Fn::GetAtt": [ "SecurityGroup1", "GroupId" ]},
				"IpProtocol": "tcp",
				"FromPort": "22",
				"ToPort": "22",
				"CidrIp": "10.160.0.0/16"
			}
		},
		"SG1Ingress5": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Fn::GetAtt": [ "SecurityGroup1", "GroupId" ]},
				"IpProtocol": "tcp",
				"FromPort": "22",
				"ToPort": "22",
				"CidrIp": "10.255.0.0/16"
			}
		},
		"SG1Ingress6": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Fn::GetAtt": [ "SecurityGroup1", "GroupId" ]},
				"IpProtocol": "tcp",
				"FromPort": "22",
				"ToPort": "22",
				"CidrIp": "172.16.0.0/12"
			}
		},
		"SG1Ingress7": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Fn::GetAtt": [ "SecurityGroup1", "GroupId" ]},
				"IpProtocol": "icmp",
				"FromPort": "-1",
				"ToPort": "-1",
				"CidrIp": "10.160.0.0/16"
			}
		},
		"SG1Ingress8": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Fn::GetAtt": [ "SecurityGroup1", "GroupId" ]},
				"IpProtocol": "icmp",
				"FromPort": "-1",
				"ToPort": "-1",
				"CidrIp": "172.16.0.0/12"
			}
		},
		"SG1Ingress9": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Fn::GetAtt": [ "SecurityGroup1", "GroupId" ]},
				"IpProtocol": "icmp",
				"FromPort": "-1",
				"ToPort": "-1",
				"CidrIp": "10.255.0.0/16"
			}
		}
	}
}
