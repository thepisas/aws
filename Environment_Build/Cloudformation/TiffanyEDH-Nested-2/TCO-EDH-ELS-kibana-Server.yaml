AWSTemplateFormatVersion: 2010-09-09
Description: >-
  CloudFormation Template to Launch Instances for ElasticSearch and KIBANA,
  configure IAM Roles, Lambda and S3 Bucket creation and policies.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Environment
        Parameters:
          - Env
          - EDHTCOTagKey
          - EDHTCOTagValue
          - Application
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - ESSubnetIds
          - EDHSecurityGroupId
      - Label:
          default: Instance Configuration
        Parameters:
          - ESKeyPairName
          - ESAmiID
          - KibanaInstanceType
          - ESInstanceType
          - ESTimeZone
          - ESInstanceVolumeSize
          - ESInstanceVolumeType
      - Label:
          default: S3 Bucket Configuration
        Parameters:
          - S3EDHMessageRAWBucketName
          - S3EDHMessageErrorBucketName
          - S3EDHMessageRefinedBucketName
          - S3EDHMessagingRepositoryBucketName
          - S3EDHTricklepollRawBucketName
          - S3EDHSSMBucketName
          - S3EDHScriptsBucketName
      - Label:
          default: SSM Parameter Store Configuration
        Parameters:
          - ESSSMParameterName
      - Label:
          default: Elastic Search Cluster Configuration
        Parameters:
          - NodesInCluster
          - LaunchKibanaNodeFlag
          - ESParmStrNonDefaultSuperUserName
          - ESParmStrNonDefaultSuperUserPswd
          - ESParmStrResetDefaultUserPswd
          - ESParmStrLDAPBindPswd
          - ESParamStrMasterNodeOnePvtIP
          - ESParamStrMasterNodeTwoPvtIP
          - ESParamStrMasterNodeThreePvtIP
Parameters:
  Application:
    Description: Tiffany Application Name
    Type: String
    Default: EDH
  EDHTCOTagKey:
    Type: String
    Description: EDH TCO Tag Key
  EDHTCOTagValue:
    Type: String
    Description: EDH TCO Tag Value
  NodesInCluster:
    Default: '3'
    Description: Choose Maximum number of Nodes in Cluster.
    Type: String
    AllowedValues:
      - '1'
      - '2'
      - '3'
      - '4'
      - '5'
      - '6'
  LaunchKibanaNodeFlag:
    Type: String
    Description: Should Kibana Node be launched?
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
  ESTimeZone:
    Type: String
    Description: Timezone in which instance needs to be set.
    Default: America/New_York
  ESInstanceVolumeSize:
    Type: String
    Description: EBS Volume Size for EC2 Instance.
    Default: 128
  ESInstanceVolumeType:
    Type: String
    Description: EBS Volume Type for EC2 Instance.
    Default: gp2
  ESParmStrNonDefaultSuperUserName:
    Type: String
    Description: Name of the Parameter Store to get NonDefault Username.
    Default: ElasticSearch_DefaultSuperUserName_Stg
  ESParmStrNonDefaultSuperUserPswd:
    Type: String
    Description: Name of the Parameter Store to get NonDefault Username password.
    Default: ElasticSearch_DefaultSuperUserPassword_Stg
  ESParmStrResetDefaultUserPswd:
    Type: String
    Description: Name of the Parameter Store to reset the default user password for elastic user and use by Lambda Fn.
    Default: ElasticSearch_LambdaESUserPassword_Stg
  ESParmStrLDAPBindPswd:
    Type: String
    Description: Name of the Parameter Store to get LDAP Bind password.
    Default: ElasticSearch_LDAPBindPassword_Stg
  ESParamStrMasterNodeOnePvtIP:
    Type: String
    Description: Name of the Parameter Store to store master node 1 pvt ip.
    Default: ES-masternode1-ipaddress
  ESParamStrMasterNodeTwoPvtIP:
    Type: String
    Description: Name of the Parameter Store to store master node 2 pvt ip.
    Default: ES-masternode2-ipaddress
  ESParamStrMasterNodeThreePvtIP:
    Type: String
    Description: Name of the Parameter Store to store master node 3 pvt ip.
    Default: ES-masternode3-ipaddress
  S3EDHMessageRAWBucketName:
    Type: String
    Description: Name of the bucket to store the RAW Messages
    AllowedPattern: 'amzs3[a-z0-9-]*'
    Default: amzs3edhmessagingrawtest
  S3EDHMessageErrorBucketName:
    Type: String
    Description: Name of the bucket to store the error Messages
    AllowedPattern: 'amzs3[a-z0-9-]*'
    Default: amzs3edhmessagingerrortest
  S3EDHMessageRefinedBucketName:
    Type: String
    Description: Name of the bucket to store the Redfined Messages
    AllowedPattern: 'amzs3[a-z0-9-]*'
    Default: amzs3edhmessagingrefinedprod
  S3EDHMessagingRepositoryBucketName:
    Type: String
    Description: Name of the bucket for elasticsearch respository
    AllowedPattern: 'amzs3[a-z0-9-]*'
    Default: amzs3edhmessagingesrepositorytest
  S3EDHTricklepollRawBucketName:
    Type: String
    Description: Name of the bucket to store tricklepoll raw dats
    AllowedPattern: 'amzs3[a-z0-9-]*'
    Default: amzs3edhtricklepollrawtest
  S3EDHScriptsBucketName:
    Type: String
    Description: Name of the bucket to store the RAW Messages
    Default: amzs3edhcloudformationtemplate
  Env :
    Description: 'The type of Env? ex: PROD, TEST, STG, NON-PROD'
    Type: String
    MinLength: '1'
    MaxLength: '20'
    AllowedValues:
      - PROD
      - TEST
      - STG
      - QA
      - DEV
    Default: TEST
  ESKeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  ESAmiID:
    Type: String
    Description: AMI ID with which Instances will be launched.
  ESInstanceType:
    Description: ElasticSearch Node for ESearch
    Type: String
    Default: m5.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KibanaInstanceType:
    Description: ElasticSearch Node for Kibana
    Type: String
    Default: m5.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  EDHSecurityGroupId:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: List of EC2 Security group, Kibana instance should configured with.
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.
  ESSubnetIds:
    Type: AWS::EC2::Subnet::Id
    Description: Select subnet in which instances will be launched.
  ESSSMParameterName:
    Type: String
    Description: SSM Parameters Store Arn
  S3EDHSSMBucketName:
    Type: String
    Description: Name of the bucket to Store SSM Parameters
    AllowedPattern: 'amzs3[a-z0-9-]*'
    Default: amzs3testssm
  ElasticSearchServerName:
    Type: String
    Description: Name of the ElasticSearch Server Name
    AllowedPattern: 'amz[a-z0-9-]*'
    Default: amzlinelat
  ESKibanaServerName:
    Type: String
    Description: Name of the ElasticSearch Kibana Server Name
    AllowedPattern: 'amz[a-z0-9-]*'
    Default: amzlinkibt
  ESParamStrKeyPair:
    Type: String
    Description: Name of the Parameter Store to store KeyPair.
    Default: ES-KeyPair
  ESUsersList:
    Type: String
    Description: Linux User Account for ElasticSearch and Kibana Nodes.
    Default: 'adatta,csett,skarmaka,droglier,nirchoud,mkundu,negupta,rprakash,sbanerje,mcuser'
Conditions:
# KIBANA node to be launched, only when Flag set for Master Node is Yes.
  LaunchKibanaNode: !Equals [!Ref "LaunchKibanaNodeFlag", 'Yes']
# When MaxNode is less than 3, exactly 1 Master Nodes will be in cluster. If flag for Kibana is set Yes, it too will lauch else only Master.
  LaunchOneMasterServerInstance:
    !Or
      [
        !Equals [!Ref "NodesInCluster", 1],
        !Equals [!Ref "NodesInCluster", 2],
      ]
# When MaxNode is greater than or equal to 3, exactly 3 Master Nodes will be in cluster. If flag for Kibana is set Yes, it too will lauch else only Master.
  LaunchThreeMasterServerInstance:
    !And [
      !Not [!Equals [!Ref "NodesInCluster", 1]],
      !Not [!Equals [!Ref "NodesInCluster", 2]]
    ]
# When MaxNode is 2 or 4, i.e 1 or 3 Master Nodes are already launched, only 1 Data node needs to be launched.
  LaunchOneDataInstance:
    !Or [
      !Equals [!Ref "NodesInCluster", 2],
      !Equals [!Ref "NodesInCluster", 4],
    ]
# When MaxNode is 5, i.e 3 Master Nodes are already launched, only 2 Data nodes needs to be launched.
  LaunchTwoDataInstance: !Equals [!Ref "NodesInCluster", 5]
# When MaxNode is 6, i.e 3 Master Nodes are already launched, only 3 Data nodes needs to be launched.
  LaunchThreeDataInstance: !Equals [!Ref "NodesInCluster", 6]
Resources:
  ElasticSearchInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub TCO-Elasticsearch-${Env}
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  ElasticSearchS3BucketPolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: ElasticSearch_S3_Access
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Sid: S3AccessPermissions
              Effect: Allow
              Action:
                - 's3:GetObject'
                - 's3:PutObject'
                - 's3:ListObjects'
                - 's3:ListBucket'
                - 's3:DeleteObject'
              Resource:
                - !Sub 'arn:aws:s3:::${S3EDHTricklepollRawBucketName}'
                - !Sub 'arn:aws:s3:::${S3EDHTricklepollRawBucketName}/*'
                - !Sub 'arn:aws:s3:::${S3EDHMessageRAWBucketName}'
                - !Sub 'arn:aws:s3:::${S3EDHMessageRAWBucketName}/*'
                - !Sub 'arn:aws:s3:::${S3EDHMessageRefinedBucketName}'
                - !Sub 'arn:aws:s3:::${S3EDHMessageRefinedBucketName}/*'
                - !Sub 'arn:aws:s3:::${S3EDHMessageErrorBucketName}'
                - !Sub 'arn:aws:s3:::${S3EDHMessageErrorBucketName}/*'
                - !Sub 'arn:aws:s3:::${S3EDHMessagingRepositoryBucketName}'
                - !Sub 'arn:aws:s3:::${S3EDHMessagingRepositoryBucketName}/*'
                - !Sub 'arn:aws:s3:::${S3EDHScriptsBucketName}'
                - !Sub 'arn:aws:s3:::${S3EDHScriptsBucketName}/*'
            - Sid: DescribeInstancesPermissions
              Effect: Allow
              Action:
                - 'ec2:DescribeInstances'
              Resource:
                - '*'
      Roles:
        - !Ref ElasticSearchInstanceRole
  ElasticSearchSSMPolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: TCO_SSM_For_ELS_EC2_Access
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'ssm:DescribeAssociation'
              - 'ssm:GetDeployablePatchSnapshotForInstance'
              - 'ssm:GetDocument'
              - 'ssm:GetManifest'
              - 'ssm:ListAssociations'
              - 'ssm:ListInstanceAssociations'
              - 'ssm:PutInventory'
              - 'ssm:PutComplianceItems'
              - 'ssm:PutConfigurePackageResult'
              - 'ssm:UpdateAssociationStatus'
              - 'ssm:UpdateInstanceAssociationStatus'
              - 'ssm:UpdateInstanceInformation'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ssm:DescribeParameters'
              - 'ssm:PutParameter'
              - 'ssm:GetParameters'
              - 'ssm:GetParameter'
              - 'ssm:DeleteParameter'
            #Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ESSSMParameterName}
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ec2messages:AcknowledgeMessage'
              - 'ec2messages:DeleteMessage'
              - 'ec2messages:FailMessage'
              - 'ec2messages:GetEndpoint'
              - 'ec2messages:GetMessages'
              - 'ec2messages:SendReply'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'cloudwatch:PutMetricData'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ec2:DescribeInstanceStatus'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ds:CreateComputer'
              - 'ds:DescribeDirectories'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:DescribeLogGroups'
              - 'logs:DescribeLogStreams'
              - 'logs:PutLogEvents'
            Resource: '*'
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:AbortMultipartUpload'
              - 's3:ListMultipartUploadParts'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
            Resource:
              - 'arn:aws:s3:::${S3EDHSSMBucketName}'
              - 'arn:aws:s3:::${S3EDHSSMBucketName}/*'
              - 'arn:aws:s3:::${S3EDHScriptsBucketName}'
              - 'arn:aws:s3:::${S3EDHScriptsBucketName}/*'
      Roles:
        - !Ref ElasticSearchInstanceRole
  ElasticSearchInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ElasticSearchInstanceRole
      InstanceProfileName: !Sub TCO-Elasticsearch-${Env}

# Master Instances
  ElasticSearchServerMasterNode0:
    Type: AWS::EC2::Instance
    Condition: LaunchOneMasterServerInstance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: !Ref ESInstanceVolumeSize
          VolumeType: !Ref ESInstanceVolumeType
      SubnetId: !Ref ESSubnetIds
      ImageId: !Ref ESAmiID
      InstanceType: !Ref ESInstanceType
      SecurityGroupIds:
        - !GetAtt ElasticSearchSecurityGroup.GroupId     
      KeyName: !Ref ESKeyPairName
      IamInstanceProfile: !Ref ElasticSearchInstanceProfile
      EbsOptimized: true
      SourceDestCheck: true
      UserData:
        Fn::Base64:
          !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0

            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]

            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"

            #!/bin/bash -xe
            exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1

            # PRE-REQUISITE INSTALLATION
            cd /tmp
            sudo yum install -y wget dos2unix

            #create elastic search user
            group=elasticsearch
            if grep -q $group /etc/group
            then
              echo "group exists"
            else
              groupadd -g 598 elasticsearch
              useradd -u 997 -g 598 -c "elasticsearch user" -s /sbin/nologin -M elasticsearch
              chage -I -1 -m 0 -M 99999 -E -1 elasticsearch
            fi

            # INSTALLATION OF PACKAGES.
            FILE=/var/tmp/ESGenericPckgInstalled
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Set Timezone
              timedatectl set-timezone ${ESTimeZone}

              cd /tmp
              yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
              yum update -y
              yum install zip unzip bind-utils traceroute lvm2 wget -y
              yum install nvme-cli -y

              # Install SSM Agent
              cd /tmp
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              #Install AWS CLI
              cd /tmp
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              rm ./awscli-bundle.zip
              rm -rf ./awscli-bundle

              cd /tmp
              #Install cloudwatch monitoring scripts
              yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo="rhui-REGION-rhel-server-optional" -y cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon
              #Enable crontab to send MemoryUtilization metric to cloudWatch.
              #TODO: Comeback: if crontab is empty below command exits script.
              #sudo crontab -l > EsCldWatchCronFile
              echo "*/5 * * * * /tmp/aws-scripts-mon/mon-put-instance-data.pl --mem-used-incl-cache-buff --mem-util --disk-space-util --disk-path=/ --from-cron" >> EsCldWatchCronFile
              sudo crontab EsCldWatchCronFile
              sudo rm EsCldWatchCronFile

              #Install packages for AD
              yum install -y sssd realmd krb5-workstation oddjob oddjob-mkhomedir samba-common-tools

              touch /var/tmp/ESGenericPckgInstalled
            fi

            # USING AWS CLI, PUT AND GET VALUES FROM PARAMETER STORE AND SET HOSTNAME.
            # Get Instance private IP Address and update in Parameter Store.
            ESMasterNodeSelfIp=$(hostname -I | head -1 | awk  '{print $1}')
            aws ssm put-parameter --name ${ESParamStrMasterNodeOnePvtIP} --type String --value $ESMasterNodeSelfIp --region us-east-1 --overwrite

            # Set Hostname
            region=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $(NF-1)}')
            ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            host_name=$(/usr/local/bin/aws ec2 --region "$region" describe-tags --filters Name=resource-id,Values="$ec2_instance_id" Name=key,Values=Name --query Tags[].Value --output text)
            hostnamectl set-hostname "$host_name"
            hostnamectl status
            #To persist the change
            echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg

            # USER AND GROUP CONFIGURATION - OS, ELASTICSEARCH, KIBANA.
            #create users with root privs
            count0=0
            for i in apathros ; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                user_created=$(id -u $i > /dev/null 2>&1; echo $?)
                  if [ $user_created -eq 0 ]; then
                    mkdir -p /home/$i/.ssh
                    touch /home/$i/.ssh/authorized_keys
                    chown -R $i:$i /home/$i/.ssh
                    chmod 700 /home/$i/.ssh
                    chmod 600 /home/$i/.ssh/authorized_keys
                    #echo "$i ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key" >> /home/apathros/.ssh/authorized_keys

                    chage -I -1 -m 0 -M 99999 -E -1 $i
                    count0=1
                  fi
              else
                echo "user $i does exist."
              fi
            done

            ADMINS=apathros
            #creation of  the  Linux user-accounts with a temporary password.
            #user_accounts="adatta,csett,skarmaka,droglier,nirchoud,mkundu,negupta,rprakash,sbanerje"
            user_accounts=${ESUsersList}
            IFS=,
            field_separator=$IFS

            count1=0
            for i in $user_accounts; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                echo "$i:T!emp123" | chpasswd
                passwd -e $i
                ADMINS="$ADMINS,$i"
                count1=1
              else
                echo "user $i exist."
              fi
            done

            if [ $count0 -eq 1 -o $count1 -eq 1 ]; then
              IFS=$field_separator
              echo -e "\nUser_Alias ES_ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "User_Alias ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "ADMINS ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            fi

            #Enable password based Authentication
            #update PasswordAuthentication from No to Yes in /etc/ssh/sshd_config and then restart sshd using systemctl restart sshd

            host_name=$(hostname -s)
            echo "hostname set is $host_name"
            if [ ${Env} == "PROD" ]; then
              srvcAcntName=svc_esprod
              label=$host_name
            else
              if [ ${Env} == "TEST" ]; then
                srvcAcntName=svc_estest
                label=$host_name
              else
                if [ ${Env} == "STG" ]; then
                  srvcAcntName=svc_esstg
                  label=$host_name
                else
                  if [ ${Env} == "DEV" ]; then
                    srvcAcntName=svc_esdev
                    label=$host_name
                  else
                    if [ ${Env} == "QA" ]; then
                      srvcAcntName=svc_esqa
                      label=$host_name
                    fi
                  fi
                fi
              fi
            fi

            #create service account and group
            if grep -q $srvcAcntName /etc/group
            then
              echo "group $srvcAcntName exists"
            else
              groupadd -g 3000 $srvcAcntName
              useradd -u 3000 -g 3000 $srvcAcntName
              chage -I -1 -m 0 -M 99999 -E -1 $srvcAcntName
            fi

            echo -e "\n# Access to $srvcAcntName,elasticsearch accounts" >> /etc/sudoers
            echo -e "$ADMINS ALL=($srvcAcntName,elasticsearch)  ALL" >> /etc/sudoers

            echo -e "\n# Access to administer elasticsearch service" >> /etc/sudoers
            echo -e "$ADMINS  ALL=(root) /usr/bin/systemctl daemon-reload, /usr/bin/systemctl start elasticsearch.service, /usr/bin/systemctl stop elasticsearch.service,  /usr/bin/systemctl status elasticsearch.service, /usr/sbin/service kibana start, /usr/sbin/service kibana stop, /usr/sbin/service kibana status, /usr/share/elasticsearch/bin/elasticsearch-plugin, /usr/share/elasticsearch/bin/x-pack/users, /usr/share/elasticsearch/bin/x-pack/certgen" >> /etc/sudoers

            #operations pertaining to the /app filesystem
            mkdir /app

            app_device=`lsblk | awk '{print $1}'| tail -1`

            if [ "$app_device" = "nvme1n1" ]; then
              mkfs.ext4 /dev/"$app_device"
              e2label /dev/"$app_device" $label
              immutable=`lsattr /etc/fstab | awk -F- '{print $5}'`
              if [ "$immutable" = "i" ]; then chattr -i /etc/fstab ; fi
              lsattr /etc/fstab
              echo "LABEL=$label /app ext4 noatime,rw 1 2" >> /etc/fstab
              mount -a
              chown -R elasticsearch.$srvcAcntName /app
              ls -ld /app
              df -h /app
            else
              echo -e "The app device/volume is "$app_device" when the expected value was nvme1n1. So the filesystem and label were not created on it."
            fi

            FILE=/var/tmp/ESSpecificPckgInstalledAndConfigured
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Install ESEARCH
              sudo yum install -y install java-1.8.0-openjdk
              wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.rpm
              sudo yum install -y elasticsearch-5.5.2.rpm
              sudo /bin/systemctl daemon-reload
              sudo /bin/systemctl enable elasticsearch.service
              sudo sed -i 's/#LimitMEMLOCK/LimitMEMLOCK/g' /usr/lib/systemd/system/elasticsearch.service
              # configure 3g to 30g, due to storage limitation have reduced the size.
              sudo sed -i 's/Xms2g/Xms10g/g' /etc/elasticsearch/jvm.options
              sudo sed -i 's/Xmx2g/Xmx10g/g' /etc/elasticsearch/jvm.options
              {
                echo "#Elasticsearch Specific Settings"
                echo "vm.max_map_count=262144"
                echo "vm.swappiness=1"
              } | sudo tee -a /etc/sysctl.conf > /dev/null
              {
                echo "#Elasticsearch Specific Settings"
                echo "elasticsearch  -  nofile  65536"
                echo "elasticsearch  hard  nproc  65536"
                echo "elasticsearch  soft  nproc  65536"
              } | sudo tee -a /etc/security/limits.conf > /dev/null
              sudo mkdir -p /app/data/lib/elasticsearch
              sudo mkdir -p /app/log/elasticsearch
              sudo chown elasticsearch:$srvcAcntName /etc/elasticsearch/elasticsearch.yml
              cd /app
              sudo chown elasticsearch:$srvcAcntName -R .
              cd /tmp
              wget https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/discovery-ec2/discovery-ec2-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/repository-s3/repository-s3-5.5.2.zip

              cd /usr/share/elasticsearch/
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/x-pack-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/discovery-ec2-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/repository-s3-5.5.2.zip

              sudo chown -R elasticsearch:$srvcAcntName /etc/elasticsearch/repository-s3


              cd /tmp
              wget https://s3.amazonaws.com/${S3EDHScriptsBucketName}/Elasticsearch/Scripts/elasticsearch-configuration.sh
              dos2unix elasticsearch-configuration.sh
              chmod +x elasticsearch-configuration.sh
              ./elasticsearch-configuration.sh

              # APPLICATION CONFIGURATION.
              ldapbindpswd=$(aws ssm get-parameter --name ${ESParmStrLDAPBindPswd} --region us-east-1 --query "Parameter.Value" --output text)
              echo "xpack.security.authc.realms.ldap1.bind_password: $ldapbindpswd" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "xpack.security.authc.realms.ldap1.url: [\"ldap://amzdcawsp01:3268\",\"ldap://amzdcawsp02:3268\"]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "10.192.15.11 AMZDCAWSP01 amzdcawsp01 amzdcawsp01.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "10.192.16.11 AMZDCAWSP02 amzdcawsp02 amzdcawsp02.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "172.16.176.51 smtp.tiffco.net smtp" | sudo tee -a  /etc/hosts > /dev/null

              # NODE SPECIFIC CONFIGURATION
              nodeName=0
              echo "node.name: elasticsearch-prod-datanode-$nodeName" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "node.master: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "node.data: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              #Installation and Configuration happened successfully.
              touch /var/tmp/ESSpecificPckgInstalledAndConfigured
            fi

            # Cluster specific Configuration
            # As such this is not needed, only 1 server case.
            if [ ${NodesInCluster} -ge 3 ]; then

              # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes. In Test and Staging this value will be 1 and for PROD 2.
              echo "discovery.zen.minimum_master_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "gateway.recover_after_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              masternode2pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeTwoPvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode2pvtip

              masternode3pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeThreePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode3pvtip

              echo "discovery.zen.ping.unicast.hosts: [\""$ESMasterNodeSelfIp\"", \""$masternode2pvtip\"", \""$masternode3pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
            else
              if [ ${NodesInCluster} -lt 3 ]; then
                # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes.
                echo "discovery.zen.minimum_master_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                echo "gateway.recover_after_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

                echo "discovery.zen.ping.unicast.hosts: [\""$ESMasterNodeSelfIp\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              fi
            fi

            # Configuration Done, Lets Enable and START the Application
            sudo /bin/systemctl daemon-reload
            sudo systemctl start elasticsearch.service

            # Elastic search takes time to come, any command executed before that will fail its execution.
            sleep 30

            FILE=/var/tmp/ESUserConfiguration
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to configure users again"
            else
              # Execute ElasticSearch Commands to -
              # 1. Create Non-Default Built-in SuperUser with password from Parameter Store.
              # 2. Reset Password for Default Built-in SuperUser with password from Parameter Store.
              # 3. Make sure bind_password for LDAP also gets filled from Parameter store password.
              ESDefaultUserName=elastic
              ESDefaultUserDefaultPassword=changeme

              # CHG1/3: Creating non-default User name from Parameter and password from Parameter store.
              ESNonDefaultUserName=${ESParmStrNonDefaultSuperUserName}
              ESNonDefaultUserPassword=${ESParmStrNonDefaultSuperUserPswd}

              curl -X POST -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESNonDefaultUserName" -H 'Content-Type: application/json' -d "{ \"password\" : \"$ESNonDefaultUserPassword\", \"roles\" : [ \"superuser\" ], \"metadata\" : { \"reserved\" : true } }"

              # VERIFY configuration of NON-DEFAULT users through non-default and default user credentials.
              # curl -XGET -u $ESNonDefaultUserName:$ESNonDefaultUserPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESNonDefaultUserName" -H 'Content-Type: application/json'
              # curl -XGET -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESNonDefaultUserName" -H 'Content-Type: application/json'

              # CHG2/3: Resetting Default user's password by taking new password from Parameter Store.
              ESDefaultUserResetPassword=${ESParmStrResetDefaultUserPswd}
              curl -X POST -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESDefaultUserName/_password" -H 'Content-Type: application/json' -d "{ \"password\" : \"$ESDefaultUserResetPassword\" }"

              # VERIFY with old default password, should get error while with new configured password it should show the user details.
              # curl -XGET -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESDefaultUserName" -H 'Content-Type: application/json'
              # curl -XGET -u $ESDefaultUserName:$ESDefaultUserResetPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESDefaultUserName" -H 'Content-Type: application/json'

              #ElasticSearch user Configuration happened successfully.
              touch /var/tmp/ESUserConfiguration
            fi

            reboot
            --//
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}01
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerMasterNode0Volume:
    Type: AWS::EC2::Volume
    DependsOn:
      - ElasticSearchServerMasterNode0
    Condition: LaunchOneMasterServerInstance
    Properties:
      AutoEnableIO: true
      AvailabilityZone: !GetAtt ElasticSearchServerMasterNode0.AvailabilityZone
      Encrypted: true
      Size: !Ref ESInstanceVolumeSize
      VolumeType: !Ref ESInstanceVolumeType
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}01/app
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerMasterNode0AttachVolume:
    Type: AWS::EC2::VolumeAttachment
    DependsOn:
      - ElasticSearchServerMasterNode0
      - ElasticSearchServerMasterNode0Volume
    Condition: LaunchOneMasterServerInstance
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref ElasticSearchServerMasterNode0
      VolumeId: !Ref ElasticSearchServerMasterNode0Volume

  ElasticSearchServerMasterNode1:
    Type: AWS::EC2::Instance
    Condition: LaunchThreeMasterServerInstance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: !Ref ESInstanceVolumeSize
          VolumeType: !Ref ESInstanceVolumeType
      SubnetId: !Ref ESSubnetIds
      ImageId: !Ref ESAmiID
      InstanceType: !Ref ESInstanceType
      SecurityGroupIds:
        - !GetAtt ElasticSearchSecurityGroup.GroupId 
      KeyName: !Ref ESKeyPairName
      IamInstanceProfile: !Ref ElasticSearchInstanceProfile
      EbsOptimized: true
      SourceDestCheck: true
      UserData:
        Fn::Base64:
          !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0

            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]

            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"

            #!/bin/bash -xe
            exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1

            # PRE-REQUISITE INSTALLATION
            cd /tmp
            sudo yum install -y wget dos2unix

            #create elastic search user
            group=elasticsearch
            if grep -q $group /etc/group
            then
              echo "group exists"
            else
              groupadd -g 598 elasticsearch
              useradd -u 997 -g 598 -c "elasticsearch user" -s /sbin/nologin -M elasticsearch
              chage -I -1 -m 0 -M 99999 -E -1 elasticsearch
            fi

            # INSTALLATION OF PACKAGES.
            FILE=/var/tmp/ESGenericPckgInstalled
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Set Timezone
              timedatectl set-timezone ${ESTimeZone}

              cd /tmp
              yum update -y
              yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
              yum install zip unzip bind-utils traceroute lvm2 wget -y
              yum install nvme-cli -y

              # Install SSM Agent
              cd /tmp
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              #Install AWS CLI
              cd /tmp
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              rm ./awscli-bundle.zip
              rm -rf ./awscli-bundle

              cd /tmp
              #Install cloudwatch monitoring scripts
              yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo="rhui-REGION-rhel-server-optional" -y cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon
              #Enable crontab to send MemoryUtilization metric to cloudWatch.
              #TODO: Comeback: if crontab is empty below command exits script.
              #sudo crontab -l > EsCldWatchCronFile
              echo "*/5 * * * * /tmp/aws-scripts-mon/mon-put-instance-data.pl --mem-used-incl-cache-buff --mem-util --disk-space-util --disk-path=/ --from-cron" >> EsCldWatchCronFile
              sudo crontab EsCldWatchCronFile
              sudo rm EsCldWatchCronFile

              #Install packages for AD
              yum install -y sssd realmd krb5-workstation oddjob oddjob-mkhomedir samba-common-tools

              touch /var/tmp/ESGenericPckgInstalled
            fi

            # USING AWS CLI, PUT AND GET VALUES FROM PARAMETER STORE AND SET HOSTNAME.
            ESMasterNodeSelfIp=$(hostname -I | head -1 | awk  '{print $1}')
            aws ssm put-parameter --name ${ESParamStrMasterNodeOnePvtIP} --type String --value $ESMasterNodeSelfIp --region us-east-1 --overwrite


            # Set Hostname
            region=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $(NF-1)}')
            ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            host_name=$(/usr/local/bin/aws ec2 --region "$region" describe-tags --filters Name=resource-id,Values="$ec2_instance_id" Name=key,Values=Name --query Tags[].Value --output text)
            hostnamectl set-hostname "$host_name"
            hostnamectl status
            #To persist the change
            echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg


            # USER AND GROUP CONFIGURATION - OS, ELASTICSEARCH, KIBANA.
            #create users with root privs
            count0=0
            for i in apathros ; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                user_created=$(id -u $i > /dev/null 2>&1; echo $?)
                  if [ $user_created -eq 0 ]; then
                    mkdir -p /home/$i/.ssh
                    touch /home/$i/.ssh/authorized_keys
                    chown -R $i:$i /home/$i/.ssh
                    chmod 700 /home/$i/.ssh
                    chmod 600 /home/$i/.ssh/authorized_keys
                    #echo "$i ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key" >> /home/apathros/.ssh/authorized_keys

                    chage -I -1 -m 0 -M 99999 -E -1 $i
                    count0=1
                  fi
              else
                echo "user $i does exist."
              fi
            done

            ADMINS=apathros
            #creation of  the  Linux user-accounts with a temporary password.
            user_accounts=${ESUsersList}
            IFS=,
            field_separator=$IFS

            count1=0
            for i in $user_accounts; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                echo "$i:T!emp123" | chpasswd
                passwd -e $i
                ADMINS="$ADMINS,$i"
                count1=1
              else
                echo "user $i exist."
              fi
            done

            if [ $count0 -eq 1 -o $count1 -eq 1 ]; then
              IFS=$field_separator
              echo -e "\nUser_Alias ES_ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "User_Alias ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "ADMINS ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            fi

            #Enable password based Authentication
            #update PasswordAuthentication from No to Yes in /etc/ssh/sshd_config and then restart sshd using systemctl restart sshd

            host_name=$(hostname -s)
            echo "hostname set is $host_name"
            if [ ${Env} == "PROD" ]; then
              srvcAcntName=svc_esprod
              label=$host_name
            else
              if [ ${Env} == "TEST" ]; then
                srvcAcntName=svc_estest
                label=$host_name
              else
                if [ ${Env} == "STG" ]; then
                  srvcAcntName=svc_esstg
                  label=$host_name
                else
                  if [ ${Env} == "DEV" ]; then
                    srvcAcntName=svc_esdev
                    label=$host_name
                  else
                    if [ ${Env} == "QA" ]; then
                      srvcAcntName=svc_esqa
                      label=$host_name
                    fi
                  fi
                fi
              fi
            fi

            #create service account and group
            if grep -q $srvcAcntName /etc/group
            then
              echo "group $srvcAcntName exists"
            else
              groupadd -g 3000 $srvcAcntName
              useradd -u 3000 -g 3000 $srvcAcntName
              chage -I -1 -m 0 -M 99999 -E -1 $srvcAcntName
            fi

            echo -e "\n# Access to $srvcAcntName,elasticsearch accounts" >> /etc/sudoers
            echo -e "$ADMINS ALL=($srvcAcntName,elasticsearch)  ALL" >> /etc/sudoers

            echo -e "\n# Access to administer elasticsearch service" >> /etc/sudoers
            echo -e "$ADMINS  ALL=(root) /usr/bin/systemctl daemon-reload, /usr/bin/systemctl start elasticsearch.service, /usr/bin/systemctl stop elasticsearch.service,  /usr/bin/systemctl status elasticsearch.service, /usr/sbin/service kibana start, /usr/sbin/service kibana stop, /usr/sbin/service kibana status, /usr/share/elasticsearch/bin/elasticsearch-plugin, /usr/share/elasticsearch/bin/x-pack/users, /usr/share/elasticsearch/bin/x-pack/certgen" >> /etc/sudoers

            #operations pertaining to the /app filesystem
            mkdir /app

            app_device=`lsblk | awk '{print $1}'| tail -1`

            if [ "$app_device" = "nvme1n1" ]; then
              mkfs.ext4 /dev/"$app_device"
              e2label /dev/"$app_device" $label
              immutable=`lsattr /etc/fstab | awk -F- '{print $5}'`
              if [ "$immutable" = "i" ]; then chattr -i /etc/fstab ; fi
              lsattr /etc/fstab
              echo "LABEL=$label /app ext4 noatime,rw 1 2" >> /etc/fstab
              mount -a
              chown -R elasticsearch.$srvcAcntName /app
              ls -ld /app
              df -h /app
            else
              echo -e "The app device/volume is "$app_device" when the expected value was nvme1n1. So the filesystem and label were not created on it."
            fi

            FILE=/var/tmp/ESSpecificPckgInstalledAndConfigured
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Install ESEARCH.
              sudo yum install -y install java-1.8.0-openjdk
              wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.rpm
              sudo yum install -y elasticsearch-5.5.2.rpm
              sudo /bin/systemctl daemon-reload
              sudo /bin/systemctl enable elasticsearch.service
              sudo sed -i 's/#LimitMEMLOCK/LimitMEMLOCK/g' /usr/lib/systemd/system/elasticsearch.service
              # configure 3g to 30g, due to storage limitation have reduced the size.
              sudo sed -i 's/Xms2g/Xms10g/g' /etc/elasticsearch/jvm.options
              sudo sed -i 's/Xmx2g/Xmx10g/g' /etc/elasticsearch/jvm.options
              {
                echo "#Elasticsearch Specific Settings"
                echo "vm.max_map_count=262144"
                echo "vm.swappiness=1"
              } | sudo tee -a /etc/sysctl.conf > /dev/null
              {
                echo "#Elasticsearch Specific Settings"
                echo "elasticsearch  -  nofile  65536"
                echo "elasticsearch  hard  nproc  65536"
                echo "elasticsearch  soft  nproc  65536"
              } | sudo tee -a /etc/security/limits.conf > /dev/null
              sudo mkdir -p /app/data/lib/elasticsearch
              sudo mkdir -p /app/log/elasticsearch
              sudo chown elasticsearch:$srvcAcntName /etc/elasticsearch/elasticsearch.yml
              cd /app
              sudo chown elasticsearch:$srvcAcntName -R .
              cd /tmp
              wget https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/discovery-ec2/discovery-ec2-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/repository-s3/repository-s3-5.5.2.zip

              cd /usr/share/elasticsearch/
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/x-pack-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/discovery-ec2-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/repository-s3-5.5.2.zip

              sudo chown -R elasticsearch:$srvcAcntName /etc/elasticsearch/repository-s3

              # GET ESEARCH CONFIGURATION SCRIPTS FROM S3 BUCKET.
              cd /tmp
              wget https://s3.amazonaws.com/${S3EDHScriptsBucketName}/Elasticsearch/Scripts/elasticsearch-configuration.sh
              dos2unix elasticsearch-configuration.sh
              chmod +x elasticsearch-configuration.sh
              ./elasticsearch-configuration.sh

              # APPLICATION CONFIGURATION.
              ldapbindpswd=$(aws ssm get-parameter --name ${ESParmStrLDAPBindPswd} --region us-east-1 --query "Parameter.Value" --output text)
              echo "xpack.security.authc.realms.ldap1.bind_password: $ldapbindpswd" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "xpack.security.authc.realms.ldap1.url: [\"ldap://amzdcawsp01:3268\",\"ldap://amzdcawsp02:3268\"]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "10.192.15.11 AMZDCAWSP01 amzdcawsp01 amzdcawsp01.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "10.192.16.11 AMZDCAWSP02 amzdcawsp02 amzdcawsp02.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "172.16.176.51 smtp.tiffco.net smtp" | sudo tee -a  /etc/hosts > /dev/null

              # NODE SPECIFIC CONFIGURATION
              nodeName=0
              echo "node.name: elasticsearch-prod-datanode-$nodeName" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "node.master: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "node.data: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

                #Installation and Configuration happened successfully.
              touch /var/tmp/ESSpecificPckgInstalledAndConfigured
            fi

            if [ ${NodesInCluster} -ge 3 ]; then
              echo "discovery.zen.minimum_master_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "gateway.recover_after_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              masternode2pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeTwoPvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode2pvtip

              masternode3pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeThreePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode3pvtip

              echo "discovery.zen.ping.unicast.hosts: [\""$ESMasterNodeSelfIp\"", \""$masternode2pvtip\"", \""$masternode3pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
            else
              if [ ${NodesInCluster} -lt 3 ]; then
                # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes.
                echo "discovery.zen.minimum_master_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                echo "gateway.recover_after_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

                echo "discovery.zen.ping.unicast.hosts: [\""$ESMasterNodeSelfIp\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              fi
            fi

            # Configuration Done, Lets Enable and START the Application
            sudo /bin/systemctl daemon-reload
            sudo systemctl start elasticsearch.service

            # Elastic search takes time to come, any command executed before that will fail its execution.
            sleep 30

            FILE=/var/tmp/ESUserConfiguration
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to configure users again"
            else
              # Execute ElasticSearch Commands to -
              # 1. Create Non-Default Built-in SuperUser with password from Parameter Store.
              # 2. Reset Password for Default Built-in SuperUser with password from Parameter Store.
              # 3. Make sure bind_password for LDAP also gets filled from Parameter store password.
              ESDefaultUserName=elastic
              ESDefaultUserDefaultPassword=changeme

              # CHG1/3: Creating non-default User name from Parameter and password from Parameter store.
              ESNonDefaultUserName=${ESParmStrNonDefaultSuperUserName}
              ESNonDefaultUserPassword=${ESParmStrNonDefaultSuperUserPswd}

              curl -X POST -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESNonDefaultUserName" -H 'Content-Type: application/json' -d "{ \"password\" : \"$ESNonDefaultUserPassword\", \"roles\" : [ \"superuser\" ], \"metadata\" : { \"reserved\" : true } }"

              # VERIFY configuration of NON-DEFAULT users through non-default and default user credentials.
              # curl -XGET -u $ESNonDefaultUserName:$ESNonDefaultUserPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESNonDefaultUserName" -H 'Content-Type: application/json'
              # curl -XGET -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESNonDefaultUserName" -H 'Content-Type: application/json'

              # CHG2/3: Resetting Default user's password by taking new password from Parameter Store.
              ESDefaultUserResetPassword=${ESParmStrResetDefaultUserPswd}
              curl -X POST -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESDefaultUserName/_password" -H 'Content-Type: application/json' -d "{ \"password\" : \"$ESDefaultUserResetPassword\" }"

              # VERIFY with old default password, should get error while with new configured password it should show the user details.
              # curl -XGET -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESDefaultUserName" -H 'Content-Type: application/json'
              # curl -XGET -u $ESDefaultUserName:$ESDefaultUserResetPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESDefaultUserName" -H 'Content-Type: application/json'

              #ElasticSearch user Configuration happened successfully.
              touch /var/tmp/ESUserConfiguration
            fi

            reboot
            --//
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}01
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerMasterNode1Volume:
    Type: AWS::EC2::Volume
    DependsOn:
      - ElasticSearchServerMasterNode1
    Condition: LaunchThreeMasterServerInstance
    Properties:
      AutoEnableIO: true
      AvailabilityZone: !GetAtt ElasticSearchServerMasterNode1.AvailabilityZone
      Encrypted: true
      Size: !Ref ESInstanceVolumeSize
      VolumeType: !Ref ESInstanceVolumeType
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}01/app
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerMasterNode1AttachVolume:
    Type: AWS::EC2::VolumeAttachment
    DependsOn:
      - ElasticSearchServerMasterNode1
      - ElasticSearchServerMasterNode1Volume
    Condition: LaunchThreeMasterServerInstance
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref ElasticSearchServerMasterNode1
      VolumeId: !Ref ElasticSearchServerMasterNode1Volume

  ElasticSearchServerMasterNode2:
    Type: AWS::EC2::Instance
    Condition: LaunchThreeMasterServerInstance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: !Ref ESInstanceVolumeSize
          VolumeType: !Ref ESInstanceVolumeType
      SubnetId: !Ref ESSubnetIds
      ImageId: !Ref ESAmiID
      InstanceType: !Ref ESInstanceType
      SecurityGroupIds:
        - !GetAtt ElasticSearchSecurityGroup.GroupId  
      KeyName: !Ref ESKeyPairName
      IamInstanceProfile: !Ref ElasticSearchInstanceProfile
      EbsOptimized: true
      SourceDestCheck: true
      UserData:
        Fn::Base64:
          !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0

            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]

            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"

            #!/bin/bash -xe
            exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1

            # PRE-REQUISITE INSTALLATION
            cd /tmp
            sudo yum install -y wget dos2unix

            #create elastic search user
            group=elasticsearch
            if grep -q $group /etc/group
            then
              echo "group exists"
            else
              groupadd -g 598 elasticsearch
              useradd -u 997 -g 598 -c "elasticsearch user" -s /sbin/nologin -M elasticsearch
              chage -I -1 -m 0 -M 99999 -E -1 elasticsearch
            fi

            # INSTALLATION OF PACKAGES.
            FILE=/var/tmp/ESGenericPckgInstalled
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Set Timezone
              timedatectl set-timezone ${ESTimeZone}

              cd /tmp
              yum update -y
              yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
              yum install zip unzip bind-utils traceroute lvm2 wget -y
              yum install nvme-cli -y

              # Install SSM Agent
              cd /tmp
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              #Install AWS CLI
              cd /tmp
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              rm ./awscli-bundle.zip
              rm -rf ./awscli-bundle

              cd /tmp
              #Install cloudwatch monitoring scripts
              yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo="rhui-REGION-rhel-server-optional" -y cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon
              #Enable crontab to send MemoryUtilization metric to cloudWatch.
              #TODO: Comeback: if crontab is empty below command exits script.
              #sudo crontab -l > EsCldWatchCronFile
              echo "*/5 * * * * /tmp/aws-scripts-mon/mon-put-instance-data.pl --mem-used-incl-cache-buff --mem-util --disk-space-util --disk-path=/ --from-cron" >> EsCldWatchCronFile
              sudo crontab EsCldWatchCronFile
              sudo rm EsCldWatchCronFile

              #Install packages for AD
              yum install -y sssd realmd krb5-workstation oddjob oddjob-mkhomedir samba-common-tools

              touch /var/tmp/ESGenericPckgInstalled
            fi

            # USING AWS CLI, PUT AND GET VALUES FROM PARAMETER STORE AND SET HOSTNAME.
            ESMasterNodeSelfIp=$(hostname -I | head -1 | awk  '{print $1}')
            aws ssm put-parameter --name ${ESParamStrMasterNodeTwoPvtIP} --type String --value $ESMasterNodeSelfIp --region us-east-1 --overwrite


            # Set Hostname
            region=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $(NF-1)}')
            ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            host_name=$(/usr/local/bin/aws ec2 --region "$region" describe-tags --filters Name=resource-id,Values="$ec2_instance_id" Name=key,Values=Name --query Tags[].Value --output text)
            hostnamectl set-hostname "$host_name"
            hostnamectl status
            #To persist the change
            echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg


            # USER AND GROUP CONFIGURATION - OS, ELASTICSEARCH, KIBANA.
            #create users with root privs
            count0=0
            for i in apathros ; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                user_created=$(id -u $i > /dev/null 2>&1; echo $?)
                  if [ $user_created -eq 0 ]; then
                    mkdir -p /home/$i/.ssh
                    touch /home/$i/.ssh/authorized_keys
                    chown -R $i:$i /home/$i/.ssh
                    chmod 700 /home/$i/.ssh
                    chmod 600 /home/$i/.ssh/authorized_keys
                    #echo "$i ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key" >> /home/apathros/.ssh/authorized_keys

                    chage -I -1 -m 0 -M 99999 -E -1 $i
                    count0=1
                  fi
              else
                echo "user $i does exist."
              fi
            done

            ADMINS=apathros
            #creation of  the  Linux user-accounts with a temporary password.
            user_accounts=${ESUsersList}
            IFS=,
            field_separator=$IFS

            count1=0
            for i in $user_accounts; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                echo "$i:T!emp123" | chpasswd
                passwd -e $i
                ADMINS="$ADMINS,$i"
                count1=1
              else
                echo "user $i exist."
              fi
            done

            if [ $count0 -eq 1 -o $count1 -eq 1 ]; then
              IFS=$field_separator
              echo -e "\nUser_Alias ES_ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "User_Alias ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "ADMINS ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            fi

            #Enable password based Authentication
            #update PasswordAuthentication from No to Yes in /etc/ssh/sshd_config and then restart sshd using systemctl restart sshd

            host_name=$(hostname -s)
            echo "hostname set is $host_name"
            if [ ${Env} == "PROD" ]; then
              srvcAcntName=svc_esprod
              label=$host_name
            else
              if [ ${Env} == "TEST" ]; then
                srvcAcntName=svc_estest
                label=$host_name
              else
                if [ ${Env} == "STG" ]; then
                  srvcAcntName=svc_esstg
                  label=$host_name
                else
                  if [ ${Env} == "DEV" ]; then
                    srvcAcntName=svc_esdev
                    label=$host_name
                  else
                    if [ ${Env} == "QA" ]; then
                      srvcAcntName=svc_esqa
                      label=$host_name
                    fi
                  fi
                fi
              fi
            fi

            #create service account and group
            if grep -q $srvcAcntName /etc/group
            then
              echo "group $srvcAcntName exists"
            else
              groupadd -g 3000 $srvcAcntName
              useradd -u 3000 -g 3000 $srvcAcntName
              chage -I -1 -m 0 -M 99999 -E -1 $srvcAcntName
            fi

            echo -e "\n# Access to $srvcAcntName,elasticsearch accounts" >> /etc/sudoers
            echo -e "$ADMINS ALL=($srvcAcntName,elasticsearch)  ALL" >> /etc/sudoers

            echo -e "\n# Access to administer elasticsearch service" >> /etc/sudoers
            echo -e "$ADMINS  ALL=(root) /usr/bin/systemctl daemon-reload, /usr/bin/systemctl start elasticsearch.service, /usr/bin/systemctl stop elasticsearch.service,  /usr/bin/systemctl status elasticsearch.service, /usr/sbin/service kibana start, /usr/sbin/service kibana stop, /usr/sbin/service kibana status, /usr/share/elasticsearch/bin/elasticsearch-plugin, /usr/share/elasticsearch/bin/x-pack/users, /usr/share/elasticsearch/bin/x-pack/certgen" >> /etc/sudoers

            #operations pertaining to the /app filesystem
            mkdir /app

            app_device=`lsblk | awk '{print $1}'| tail -1`

            if [ "$app_device" = "nvme1n1" ]; then
              mkfs.ext4 /dev/"$app_device"
              e2label /dev/"$app_device" $label
              immutable=`lsattr /etc/fstab | awk -F- '{print $5}'`
              if [ "$immutable" = "i" ]; then chattr -i /etc/fstab ; fi
              lsattr /etc/fstab
              echo "LABEL=$label /app ext4 noatime,rw 1 2" >> /etc/fstab
              mount -a
              chown -R elasticsearch.$srvcAcntName /app
              ls -ld /app
              df -h /app
            else
              echo -e "The app device/volume is "$app_device" when the expected value was nvme1n1. So the filesystem and label were not created on it."
            fi

            FILE=/var/tmp/ESSpecificPckgInstalledAndConfigured
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Install ESEARCH.
              sudo yum install -y install java-1.8.0-openjdk
              wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.rpm
              sudo yum install -y elasticsearch-5.5.2.rpm
              sudo /bin/systemctl daemon-reload
              sudo /bin/systemctl enable elasticsearch.service
              sudo sed -i 's/#LimitMEMLOCK/LimitMEMLOCK/g' /usr/lib/systemd/system/elasticsearch.service
              # configure 3g to 30g, due to storage limitation have reduced the size.
              sudo sed -i 's/Xms2g/Xms10g/g' /etc/elasticsearch/jvm.options
              sudo sed -i 's/Xmx2g/Xmx10g/g' /etc/elasticsearch/jvm.options
              {
                echo "#Elasticsearch Specific Settings"
                echo "vm.max_map_count=262144"
                echo "vm.swappiness=1"
              } | sudo tee -a /etc/sysctl.conf > /dev/null
              {
                echo "#Elasticsearch Specific Settings"
                echo "elasticsearch  -  nofile  65536"
                echo "elasticsearch  hard  nproc  65536"
                echo "elasticsearch  soft  nproc  65536"
              } | sudo tee -a /etc/security/limits.conf > /dev/null
              sudo mkdir -p /app/data/lib/elasticsearch
              sudo mkdir -p /app/log/elasticsearch
              sudo chown elasticsearch:$srvcAcntName /etc/elasticsearch/elasticsearch.yml
              cd /app
              sudo chown elasticsearch:$srvcAcntName -R .
              cd /tmp
              wget https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/discovery-ec2/discovery-ec2-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/repository-s3/repository-s3-5.5.2.zip

              cd /usr/share/elasticsearch/
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/x-pack-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/discovery-ec2-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/repository-s3-5.5.2.zip

              sudo chown -R elasticsearch:$srvcAcntName /etc/elasticsearch/repository-s3

              # GET ESEARCH CONFIGURATION SCRIPTS FROM S3 BUCKET.
              cd /tmp
              wget https://s3.amazonaws.com/${S3EDHScriptsBucketName}/Elasticsearch/Scripts/elasticsearch-configuration.sh
              dos2unix elasticsearch-configuration.sh
              chmod +x elasticsearch-configuration.sh
              ./elasticsearch-configuration.sh

              # APPLICATION CONFIGURATION.
              ldapbindpswd=$(aws ssm get-parameter --name ${ESParmStrLDAPBindPswd} --region us-east-1 --query "Parameter.Value" --output text)
              echo "xpack.security.authc.realms.ldap1.bind_password: $ldapbindpswd" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "xpack.security.authc.realms.ldap1.url: [\"ldap://amzdcawsp01:3268\",\"ldap://amzdcawsp02:3268\"]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "10.192.15.11 AMZDCAWSP01 amzdcawsp01 amzdcawsp01.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "10.192.16.11 AMZDCAWSP02 amzdcawsp02 amzdcawsp02.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "172.16.176.51 smtp.tiffco.net smtp" | sudo tee -a  /etc/hosts > /dev/null

              # NODE SPECIFIC CONFIGURATION
              nodeName=1
              echo "node.name: elasticsearch-prod-datanode-$nodeName" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "node.master: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "node.data: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              #Installation and Configuration happened successfully.
              touch /var/tmp/ESSpecificPckgInstalledAndConfigured
            fi

            if [ ${NodesInCluster} -ge 3 ]; then
              echo "discovery.zen.minimum_master_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "gateway.recover_after_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              masternode2pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeTwoPvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode2pvtip

              masternode3pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeThreePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode3pvtip

              echo "discovery.zen.ping.unicast.hosts: [\""$ESMasterNodeSelfIp\"", \""$masternode2pvtip\"", \""$masternode3pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
            else
              if [ ${NodesInCluster} -lt 3 ]; then
                # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes.
                echo "discovery.zen.minimum_master_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                echo "gateway.recover_after_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

                echo "discovery.zen.ping.unicast.hosts: [\""$ESMasterNodeSelfIp\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              fi
            fi

            # Configuration Done, Lets Enable and START the Application
            sudo /bin/systemctl daemon-reload
            sudo systemctl start elasticsearch.service

            # Elastic search takes time to come, any command executed before that will fail its execution.
            sleep 30

            FILE=/var/tmp/ESUserConfiguration
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to configure users again"
            else
              # Execute ElasticSearch Commands to -
              # 1. Create Non-Default Built-in SuperUser with password from Parameter Store.
              # 2. Reset Password for Default Built-in SuperUser with password from Parameter Store.
              # 3. Make sure bind_password for LDAP also gets filled from Parameter store password.
              ESDefaultUserName=elastic
              ESDefaultUserDefaultPassword=changeme

              # CHG1/3: Creating non-default User name from Parameter and password from Parameter store.
              ESNonDefaultUserName=${ESParmStrNonDefaultSuperUserName}
              ESNonDefaultUserPassword=${ESParmStrNonDefaultSuperUserPswd}

              curl -X POST -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESNonDefaultUserName" -H 'Content-Type: application/json' -d "{ \"password\" : \"$ESNonDefaultUserPassword\", \"roles\" : [ \"superuser\" ], \"metadata\" : { \"reserved\" : true } }"

              # VERIFY configuration of NON-DEFAULT users through non-default and default user credentials.
              # curl -XGET -u $ESNonDefaultUserName:$ESNonDefaultUserPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESNonDefaultUserName" -H 'Content-Type: application/json'
              # curl -XGET -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESNonDefaultUserName" -H 'Content-Type: application/json'

              # CHG2/3: Resetting Default user's password by taking new password from Parameter Store.
              ESDefaultUserResetPassword=${ESParmStrResetDefaultUserPswd}
              curl -X POST -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESDefaultUserName/_password" -H 'Content-Type: application/json' -d "{ \"password\" : \"$ESDefaultUserResetPassword\" }"

              # VERIFY with old default password, should get error while with new configured password it should show the user details.
              # curl -XGET -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESDefaultUserName" -H 'Content-Type: application/json'
              # curl -XGET -u $ESDefaultUserName:$ESDefaultUserResetPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESDefaultUserName" -H 'Content-Type: application/json'

              #ElasticSearch user Configuration happened successfully.
              touch /var/tmp/ESUserConfiguration
            fi

            reboot
            --//
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}02
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerMasterNode2Volume:
    Type: AWS::EC2::Volume
    DependsOn:
      - ElasticSearchServerMasterNode2
    Condition: LaunchThreeMasterServerInstance
    Properties:
      AutoEnableIO: true
      AvailabilityZone: !GetAtt ElasticSearchServerMasterNode2.AvailabilityZone
      Encrypted: true
      Size: !Ref ESInstanceVolumeSize
      VolumeType: !Ref ESInstanceVolumeType
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}02/app
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerMasterNode2AttachVolume:
    Type: AWS::EC2::VolumeAttachment
    DependsOn:
      - ElasticSearchServerMasterNode2
      - ElasticSearchServerMasterNode2Volume
    Condition: LaunchThreeMasterServerInstance
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref ElasticSearchServerMasterNode2
      VolumeId: !Ref ElasticSearchServerMasterNode2Volume

  ElasticSearchServerMasterNode3:
    Type: AWS::EC2::Instance
    Condition: LaunchThreeMasterServerInstance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: !Ref ESInstanceVolumeSize
          VolumeType: !Ref ESInstanceVolumeType
      SubnetId: !Ref ESSubnetIds
      ImageId: !Ref ESAmiID
      InstanceType: !Ref ESInstanceType
      SecurityGroupIds:
        - !GetAtt ElasticSearchSecurityGroup.GroupId  
      KeyName: !Ref ESKeyPairName
      IamInstanceProfile: !Ref ElasticSearchInstanceProfile
      EbsOptimized: true
      SourceDestCheck: true
      UserData:
        Fn::Base64:
          !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0

            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]

            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"

            #!/bin/bash -xe
            exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1

            # PRE-REQUISITE INSTALLATION
            cd /tmp
            sudo yum install -y wget dos2unix

            #create elastic search user
            group=elasticsearch
            if grep -q $group /etc/group
            then
              echo "group exists"
            else
              groupadd -g 598 elasticsearch
              useradd -u 997 -g 598 -c "elasticsearch user" -s /sbin/nologin -M elasticsearch
              chage -I -1 -m 0 -M 99999 -E -1 elasticsearch
            fi

            # INSTALLATION OF PACKAGES.
            FILE=/var/tmp/ESGenericPckgInstalled
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Set Timezone
              timedatectl set-timezone ${ESTimeZone}

              cd /tmp
              yum update -y
              yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
              yum install zip unzip bind-utils traceroute lvm2 wget -y
              yum install nvme-cli -y

              # Install SSM Agent
              cd /tmp
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              #Install AWS CLI
              cd /tmp
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              rm ./awscli-bundle.zip
              rm -rf ./awscli-bundle

              cd /tmp
              #Install cloudwatch monitoring scripts
              yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo="rhui-REGION-rhel-server-optional" -y cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon
              #Enable crontab to send MemoryUtilization metric to cloudWatch.
              #TODO: Comeback: if crontab is empty below command exits script.
              #sudo crontab -l > EsCldWatchCronFile
              echo "*/5 * * * * /tmp/aws-scripts-mon/mon-put-instance-data.pl --mem-used-incl-cache-buff --mem-util --disk-space-util --disk-path=/ --from-cron" >> EsCldWatchCronFile
              sudo crontab EsCldWatchCronFile
              sudo rm EsCldWatchCronFile

              #Install packages for AD
              yum install -y sssd realmd krb5-workstation oddjob oddjob-mkhomedir samba-common-tools

              touch /var/tmp/ESGenericPckgInstalled
            fi

            # USING AWS CLI, PUT AND GET VALUES FROM PARAMETER STORE AND SET HOSTNAME.
            ESMasterNodeSelfIp=$(hostname -I | head -1 | awk  '{print $1}')
            aws ssm put-parameter --name ${ESParamStrMasterNodeThreePvtIP} --type String --value $ESMasterNodeSelfIp --region us-east-1 --overwrite


            # Set Hostname
            region=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $(NF-1)}')
            ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            host_name=$(/usr/local/bin/aws ec2 --region "$region" describe-tags --filters Name=resource-id,Values="$ec2_instance_id" Name=key,Values=Name --query Tags[].Value --output text)
            hostnamectl set-hostname "$host_name"
            hostnamectl status
            #To persist the change
            echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg


            # USER AND GROUP CONFIGURATION - OS, ELASTICSEARCH, KIBANA.
            #create users with root privs
            count0=0
            for i in apathros ; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                user_created=$(id -u $i > /dev/null 2>&1; echo $?)
                  if [ $user_created -eq 0 ]; then
                    mkdir -p /home/$i/.ssh
                    touch /home/$i/.ssh/authorized_keys
                    chown -R $i:$i /home/$i/.ssh
                    chmod 700 /home/$i/.ssh
                    chmod 600 /home/$i/.ssh/authorized_keys
                    #echo "$i ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key" >> /home/apathros/.ssh/authorized_keys

                    chage -I -1 -m 0 -M 99999 -E -1 $i
                    count0=1
                  fi
              else
                echo "user $i does exist."
              fi
            done

            ADMINS=apathros
            #creation of  the  Linux user-accounts with a temporary password.
            user_accounts=${ESUsersList}
            IFS=,
            field_separator=$IFS

            count1=0
            for i in $user_accounts; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                echo "$i:T!emp123" | chpasswd
                passwd -e $i
                ADMINS="$ADMINS,$i"
                count1=1
              else
                echo "user $i exist."
              fi
            done

            if [ $count0 -eq 1 -o $count1 -eq 1 ]; then
              IFS=$field_separator
              echo -e "\nUser_Alias ES_ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "User_Alias ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "ADMINS ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            fi

            #Enable password based Authentication
            #update PasswordAuthentication from No to Yes in /etc/ssh/sshd_config and then restart sshd using systemctl restart sshd

            host_name=$(hostname -s)
            echo "hostname set is $host_name"
            if [ ${Env} == "PROD" ]; then
              srvcAcntName=svc_esprod
              label=$host_name
            else
              if [ ${Env} == "TEST" ]; then
                srvcAcntName=svc_estest
                label=$host_name
              else
                if [ ${Env} == "STG" ]; then
                  srvcAcntName=svc_esstg
                  label=$host_name
                else
                  if [ ${Env} == "DEV" ]; then
                    srvcAcntName=svc_esdev
                    label=$host_name
                  else
                    if [ ${Env} == "QA" ]; then
                      srvcAcntName=svc_esqa
                      label=$host_name
                    fi
                  fi
                fi
              fi
            fi

            #create service account and group
            if grep -q $srvcAcntName /etc/group
            then
              echo "group $srvcAcntName exists"
            else
              groupadd -g 3000 $srvcAcntName
              useradd -u 3000 -g 3000 $srvcAcntName
              chage -I -1 -m 0 -M 99999 -E -1 $srvcAcntName
            fi

            echo -e "\n# Access to $srvcAcntName,elasticsearch accounts" >> /etc/sudoers
            echo -e "$ADMINS ALL=($srvcAcntName,elasticsearch)  ALL" >> /etc/sudoers

            echo -e "\n# Access to administer elasticsearch service" >> /etc/sudoers
            echo -e "$ADMINS  ALL=(root) /usr/bin/systemctl daemon-reload, /usr/bin/systemctl start elasticsearch.service, /usr/bin/systemctl stop elasticsearch.service,  /usr/bin/systemctl status elasticsearch.service, /usr/sbin/service kibana start, /usr/sbin/service kibana stop, /usr/sbin/service kibana status, /usr/share/elasticsearch/bin/elasticsearch-plugin, /usr/share/elasticsearch/bin/x-pack/users, /usr/share/elasticsearch/bin/x-pack/certgen" >> /etc/sudoers

            #operations pertaining to the /app filesystem
            mkdir /app

            app_device=`lsblk | awk '{print $1}'| tail -1`

            if [ "$app_device" = "nvme1n1" ]; then
              mkfs.ext4 /dev/"$app_device"
              e2label /dev/"$app_device" $label
              immutable=`lsattr /etc/fstab | awk -F- '{print $5}'`
              if [ "$immutable" = "i" ]; then chattr -i /etc/fstab ; fi
              lsattr /etc/fstab
              echo "LABEL=$label /app ext4 noatime,rw 1 2" >> /etc/fstab
              mount -a
              chown -R elasticsearch.$srvcAcntName /app
              ls -ld /app
              df -h /app
            else
              echo -e "The app device/volume is "$app_device" when the expected value was nvme1n1. So the filesystem and label were not created on it."
            fi

            FILE=/var/tmp/ESSpecificPckgInstalledAndConfigured
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Install ESEARCH.
              sudo yum install -y install java-1.8.0-openjdk
              wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.rpm
              sudo yum install -y elasticsearch-5.5.2.rpm
              sudo /bin/systemctl daemon-reload
              sudo /bin/systemctl enable elasticsearch.service
              sudo sed -i 's/#LimitMEMLOCK/LimitMEMLOCK/g' /usr/lib/systemd/system/elasticsearch.service
              # configure 3g to 30g, due to storage limitation have reduced the size.
              sudo sed -i 's/Xms2g/Xms10g/g' /etc/elasticsearch/jvm.options
              sudo sed -i 's/Xmx2g/Xmx10g/g' /etc/elasticsearch/jvm.options
              {
                echo "#Elasticsearch Specific Settings"
                echo "vm.max_map_count=262144"
                echo "vm.swappiness=1"
              } | sudo tee -a /etc/sysctl.conf > /dev/null
              {
                echo "#Elasticsearch Specific Settings"
                echo "elasticsearch  -  nofile  65536"
                echo "elasticsearch  hard  nproc  65536"
                echo "elasticsearch  soft  nproc  65536"
              } | sudo tee -a /etc/security/limits.conf > /dev/null
              sudo mkdir -p /app/data/lib/elasticsearch
              sudo mkdir -p /app/log/elasticsearch
              sudo chown elasticsearch:$srvcAcntName /etc/elasticsearch/elasticsearch.yml
              cd /app
              sudo chown elasticsearch:$srvcAcntName -R .
              cd /tmp
              wget https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/discovery-ec2/discovery-ec2-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/repository-s3/repository-s3-5.5.2.zip

              cd /usr/share/elasticsearch/
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/x-pack-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/discovery-ec2-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/repository-s3-5.5.2.zip

              sudo chown -R elasticsearch:$srvcAcntName /etc/elasticsearch/repository-s3

              # GET ESEARCH CONFIGURATION SCRIPTS FROM S3 BUCKET.
              cd /tmp
              wget https://s3.amazonaws.com/${S3EDHScriptsBucketName}/Elasticsearch/Scripts/elasticsearch-configuration.sh
              dos2unix elasticsearch-configuration.sh
              chmod +x elasticsearch-configuration.sh
              ./elasticsearch-configuration.sh

              # APPLICATION CONFIGURATION.
              ldapbindpswd=$(aws ssm get-parameter --name ${ESParmStrLDAPBindPswd} --region us-east-1 --query "Parameter.Value" --output text)
              echo "xpack.security.authc.realms.ldap1.bind_password: $ldapbindpswd" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "xpack.security.authc.realms.ldap1.url: [\"ldap://amzdcawsp01:3268\",\"ldap://amzdcawsp02:3268\"]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "10.192.15.11 AMZDCAWSP01 amzdcawsp01 amzdcawsp01.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "10.192.16.11 AMZDCAWSP02 amzdcawsp02 amzdcawsp02.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "172.16.176.51 smtp.tiffco.net smtp" | sudo tee -a  /etc/hosts > /dev/null

              # NODE SPECIFIC CONFIGURATION
              nodeName=2
              echo "node.name: elasticsearch-prod-datanode-$nodeName" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "node.master: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "node.data: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              #Installation and Configuration happened successfully.
              touch /var/tmp/ESSpecificPckgInstalledAndConfigured
            fi

            if [ ${NodesInCluster} -ge 3 ]; then
              echo "discovery.zen.minimum_master_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "gateway.recover_after_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              masternode2pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeTwoPvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode2pvtip

              masternode3pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeThreePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode3pvtip

              echo "discovery.zen.ping.unicast.hosts: [\""$ESMasterNodeSelfIp\"", \""$masternode2pvtip\"", \""$masternode3pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
            else
              if [ ${NodesInCluster} -lt 3 ]; then
                # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes.
                echo "discovery.zen.minimum_master_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                echo "gateway.recover_after_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

                echo "discovery.zen.ping.unicast.hosts: [\""$ESMasterNodeSelfIp\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              fi
            fi

            # Configuration Done, Lets Enable and START the Application
            sudo /bin/systemctl daemon-reload
            sudo systemctl start elasticsearch.service

            # Elastic search takes time to come, any command executed before that will fail its execution.
            sleep 30

            FILE=/var/tmp/ESUserConfiguration
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to configure users again"
            else
              # Execute ElasticSearch Commands to -
              # 1. Create Non-Default Built-in SuperUser with password from Parameter Store.
              # 2. Reset Password for Default Built-in SuperUser with password from Parameter Store.
              # 3. Make sure bind_password for LDAP also gets filled from Parameter store password.
              ESDefaultUserName=elastic
              ESDefaultUserDefaultPassword=changeme

              # CHG1/3: Creating non-default User name from Parameter and password from Parameter store.
              ESNonDefaultUserName=${ESParmStrNonDefaultSuperUserName}
              ESNonDefaultUserPassword=${ESParmStrNonDefaultSuperUserPswd}

              curl -X POST -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESNonDefaultUserName" -H 'Content-Type: application/json' -d "{ \"password\" : \"$ESNonDefaultUserPassword\", \"roles\" : [ \"superuser\" ], \"metadata\" : { \"reserved\" : true } }"

              # VERIFY configuration of NON-DEFAULT users through non-default and default user credentials.
              # curl -XGET -u $ESNonDefaultUserName:$ESNonDefaultUserPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESNonDefaultUserName" -H 'Content-Type: application/json'
              # curl -XGET -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESNonDefaultUserName" -H 'Content-Type: application/json'

              # CHG2/3: Resetting Default user's password by taking new password from Parameter Store.
              ESDefaultUserResetPassword=${ESParmStrResetDefaultUserPswd}
              curl -X POST -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESDefaultUserName/_password" -H 'Content-Type: application/json' -d "{ \"password\" : \"$ESDefaultUserResetPassword\" }"

              # VERIFY with old default password, should get error while with new configured password it should show the user details.
              # curl -XGET -u $ESDefaultUserName:$ESDefaultUserDefaultPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESDefaultUserName" -H 'Content-Type: application/json'
              # curl -XGET -u $ESDefaultUserName:$ESDefaultUserResetPassword "$ESMasterNodeSelfIp:9200/_xpack/security/user/$ESDefaultUserName" -H 'Content-Type: application/json'

              #ElasticSearch user Configuration happened successfully.
              touch /var/tmp/ESUserConfiguration
            fi

            reboot
            --//
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}03
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerMasterNode3Volume:
    Type: AWS::EC2::Volume
    DependsOn:
      - ElasticSearchServerMasterNode3
    Condition: LaunchThreeMasterServerInstance
    Properties:
      AutoEnableIO: true
      AvailabilityZone: !GetAtt ElasticSearchServerMasterNode3.AvailabilityZone
      Encrypted: true
      Size: !Ref ESInstanceVolumeSize
      VolumeType: !Ref ESInstanceVolumeType
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}03/app
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerMasterNode3AttachVolume:
    Type: AWS::EC2::VolumeAttachment
    DependsOn:
      - ElasticSearchServerMasterNode3
      - ElasticSearchServerMasterNode3Volume
    Condition: LaunchThreeMasterServerInstance
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref ElasticSearchServerMasterNode3
      VolumeId: !Ref ElasticSearchServerMasterNode3Volume

# Kibana Instance
  ElasticSearchKibanaInstance:
    Type: AWS::EC2::Instance
    Condition: LaunchKibanaNode
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: !Ref ESInstanceVolumeSize
          VolumeType: !Ref ESInstanceVolumeType
      SubnetId: !Ref ESSubnetIds
      ImageId: !Ref ESAmiID
      InstanceType: !Ref KibanaInstanceType
      SecurityGroupIds:
        - !GetAtt ElasticSearchSecurityGroup.GroupId 
      KeyName: !Ref ESKeyPairName
      IamInstanceProfile: !Ref ElasticSearchInstanceProfile
      EbsOptimized: true
      SourceDestCheck: true
      UserData:
        Fn::Base64:
          !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0

            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]

            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"

            #!/bin/bash -xe
            exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1

            # PRE-REQUISITE INSTALLATION
            cd /tmp
            sudo yum install -y wget dos2unix

            #create elastic search user
            group=elasticsearch
            if grep -q $group /etc/group
            then
              echo "group exists"
            else
              groupadd -g 598 elasticsearch
              useradd -u 997 -g 598 -c "elasticsearch user" -s /sbin/nologin -M elasticsearch
              chage -I -1 -m 0 -M 99999 -E -1 elasticsearch
            fi

            # INSTALLATION OF PACKAGES.
            FILE=/var/tmp/ESGenericPckgInstalled
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Set Timezone
              timedatectl set-timezone ${ESTimeZone}

              cd /tmp
              yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
              yum update -y
              yum install zip unzip bind-utils traceroute lvm2 wget -y
              yum install nvme-cli -y

              # Install SSM Agent
              cd /tmp
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              #Install AWS CLI
              cd /tmp
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              rm ./awscli-bundle.zip
              rm -rf ./awscli-bundle

              cd /tmp
              #Install cloudwatch monitoring scripts
              yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo="rhui-REGION-rhel-server-optional" -y cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon
              #Enable crontab to send MemoryUtilization metric to cloudWatch.
              #TODO: Comeback: if crontab is empty below command exits script.
              #crontab -l > EsCldWatchCronFile
              echo "*/5 * * * * /tmp/aws-scripts-mon/mon-put-instance-data.pl --mem-used-incl-cache-buff --mem-util --disk-space-util --disk-path=/ --from-cron" >> EsCldWatchCronFile
              crontab EsCldWatchCronFile
              sudo rm EsCldWatchCronFile

              #Install packages for AD
              yum install -y sssd realmd krb5-workstation oddjob oddjob-mkhomedir samba-common-tools

              touch /var/tmp/ESGenericPckgInstalled
            fi

            # USING AWS CLI, PUT AND GET VALUES FROM PARAMETER STORE AND SET HOSTNAME.
            # Set Hostname
            region=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $(NF-1)}')
            ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            host_name=$(/usr/local/bin/aws ec2 --region "$region" describe-tags --filters Name=resource-id,Values="$ec2_instance_id" Name=key,Values=Name --query Tags[].Value --output text)
            hostnamectl set-hostname "$host_name"
            hostnamectl status
            #To persist the change
            echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg

            # USER AND GROUP CONFIGURATION - OS, ELASTICSEARCH, KIBANA.
            #create users with root privs
            count0=0
            for i in apathros ; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                user_created=$(id -u $i > /dev/null 2>&1; echo $?)
                  if [ $user_created -eq 0 ]; then
                    mkdir -p /home/$i/.ssh
                    touch /home/$i/.ssh/authorized_keys
                    chown -R $i:$i /home/$i/.ssh
                    chmod 700 /home/$i/.ssh
                    chmod 600 /home/$i/.ssh/authorized_keys
                    #echo "$i ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key" >> /home/apathros/.ssh/authorized_keys

                    chage -I -1 -m 0 -M 99999 -E -1 $i
                    count0=1
                  fi
              else
                echo "user $i does exist."
              fi
            done

            ADMINS=apathros
            #creation of  the  Linux user-accounts with a temporary password.
            user_accounts=${ESUsersList}
            echo "users in user_accounts are $user_accounts"
            IFS=,
            field_separator=$IFS

            count1=0
            for i in $user_accounts; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                echo "$i:T!emp123" | chpasswd
                passwd -e $i
                ADMINS="$ADMINS,$i"
                count1=1
              else
                echo "user $i exist."
              fi
            done

            if [ $count0 -eq 1 -o $count1 -eq 1 ]; then
              IFS=$field_separator
              echo -e "\nUser_Alias ES_ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "User_Alias ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "ADMINS ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            fi

            #Enable password based Authentication
            #update PasswordAuthentication from No to Yes in /etc/ssh/sshd_config and then restart sshd using systemctl restart sshd

            host_name=$(hostname -s)
            echo "hostname set is $host_name"
            if [ ${Env} == "PROD" ]; then
              srvcAcntName=svc_esprod
              label=$host_name
            else
              if [ ${Env} == "TEST" ]; then
                srvcAcntName=svc_estest
                label=$host_name
              else
                if [ ${Env} == "STG" ]; then
                  srvcAcntName=svc_esstg
                  label=$host_name
                else
                  if [ ${Env} == "DEV" ]; then
                    srvcAcntName=svc_esdev
                    label=$host_name
                  else
                    if [ ${Env} == "QA" ]; then
                      srvcAcntName=svc_esqa
                      label=$host_name
                    fi
                  fi
                fi
              fi
            fi

            #create service account and group
            if grep -q $srvcAcntName /etc/group
            then
              echo "group $srvcAcntName exists"
            else
              groupadd -g 3000 $srvcAcntName
              useradd -u 3000 -g 3000 $srvcAcntName
              chage -I -1 -m 0 -M 99999 -E -1 $srvcAcntName
            fi

            echo -e "\n# Access to $srvcAcntName,elasticsearch,kibana accounts" >> /etc/sudoers
            echo -e "$ADMINS ALL=($srvcAcntName,elasticsearch,kibana)  ALL" >> /etc/sudoers

            echo -e "\n# Access to administer elasticsearch service" >> /etc/sudoers
            echo -e "$ADMINS  ALL=(root) /usr/bin/systemctl daemon-reload, /usr/bin/systemctl start elasticsearch.service, /usr/bin/systemctl stop elasticsearch.service,  /usr/bin/systemctl status elasticsearch.service, /usr/sbin/service kibana start, /usr/sbin/service kibana stop, /usr/sbin/service kibana status, /usr/share/elasticsearch/bin/elasticsearch-plugin, /usr/share/elasticsearch/bin/x-pack/users, /usr/share/elasticsearch/bin/x-pack/certgen" >> /etc/sudoers

            #operations pertaining to the /app filesystem
            mkdir /app

            app_device=`lsblk | awk '{print $1}'| tail -1`

            if [ "$app_device" = "nvme1n1" ]; then
              mkfs.ext4 /dev/"$app_device"
              e2label /dev/"$app_device" $label
              immutable=`lsattr /etc/fstab | awk -F- '{print $5}'`
              if [ "$immutable" = "i" ]; then chattr -i /etc/fstab ; fi
              lsattr /etc/fstab
              echo "LABEL=$label /app ext4 noatime,rw 1 2" >> /etc/fstab
              mount -a
              chown -R elasticsearch.$srvcAcntName /app
              ls -ld /app
              df -h /app
            else
              echo -e "The app device/volume is "$app_device" when the expected value was nvme1n1. So the filesystem and label were not created on it."
            fi

            FILE=/var/tmp/ESSpecificPckgInstalledAndConfigured
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Install ESEARCH.
              sudo yum install -y install java-1.8.0-openjdk
              wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.rpm
              sudo yum install -y elasticsearch-5.5.2.rpm
              sudo /bin/systemctl daemon-reload
              sudo /bin/systemctl enable elasticsearch.service
              sudo sed -i 's/#LimitMEMLOCK/LimitMEMLOCK/g' /usr/lib/systemd/system/elasticsearch.service
              # configure 3g to 30g, due to storage limitation have reduced the size.
              sudo sed -i 's/Xms2g/Xms10g/g' /etc/elasticsearch/jvm.options
              sudo sed -i 's/Xmx2g/Xmx10g/g' /etc/elasticsearch/jvm.options
              {
                echo "#Elasticsearch Specific Settings"
                echo "vm.max_map_count=262144"
                echo "vm.swappiness=1"
              } | sudo tee -a /etc/sysctl.conf > /dev/null
              {
                echo "#Elasticsearch Specific Settings"
                echo "elasticsearch  -  nofile  65536"
                echo "elasticsearch  hard  nproc  65536"
                echo "elasticsearch  soft  nproc  65536"
              } | sudo tee -a /etc/security/limits.conf > /dev/null
              sudo mkdir -p /app/data/lib/elasticsearch
              sudo mkdir -p /app/log/elasticsearch
              sudo chown elasticsearch:$srvcAcntName /etc/elasticsearch/elasticsearch.yml
              cd /app
              sudo chown elasticsearch:$srvcAcntName -R .
              cd /tmp
              wget https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/discovery-ec2/discovery-ec2-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/repository-s3/repository-s3-5.5.2.zip

              cd /usr/share/elasticsearch/
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/x-pack-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/discovery-ec2-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/repository-s3-5.5.2.zip

              sudo chown -R elasticsearch:$srvcAcntName /etc/elasticsearch/repository-s3

              # GET ESEARCH CONFIGURATION SCRIPTS FROM S3 BUCKET.
              cd /tmp
              wget https://s3.amazonaws.com/${S3EDHScriptsBucketName}/Elasticsearch/Scripts/elasticsearch-configuration.sh
              dos2unix elasticsearch-configuration.sh
              chmod +x elasticsearch-configuration.sh
              ./elasticsearch-configuration.sh

              #NODE SPECIFIC CONFIGURATION: KIBANA
              echo "node.name: elasticsearch-prod-config" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "node.master: false" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "node.data: false" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              ldapbindpswd=$(aws ssm get-parameter --name ${ESParmStrLDAPBindPswd} --region us-east-1 --query "Parameter.Value" --output text)
              echo "xpack.security.authc.realms.ldap1.bind_password: $ldapbindpswd" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              #Installation and Configuration happened successfully.
              touch /var/tmp/ESSpecificPckgInstalledAndConfigured
            fi

            if [ ${NodesInCluster} -ge 3 ]; then
              masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode1pvtip

              masternode2pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeTwoPvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode2pvtip

              masternode3pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeThreePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode3pvtip

              echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\"", \""$masternode2pvtip\"", \""$masternode3pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "discovery.zen.minimum_master_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "gateway.recover_after_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
            else
              if [ ${NodesInCluster} -lt 3 ]; then
                masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
                echo $masternode1pvtip

                echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

                echo "discovery.zen.minimum_master_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                echo "gateway.recover_after_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              fi
            fi

            echo "xpack.security.authc.realms.ldap1.url: [\"ldap://amzdcawsp01:3268\",\"ldap://amzdcawsp02:3268\"]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

            echo "10.192.15.11 AMZDCAWSP01 amzdcawsp01 amzdcawsp01.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
            echo "10.192.16.11 AMZDCAWSP02 amzdcawsp02 amzdcawsp02.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
            echo "172.16.176.51 smtp.tiffco.net smtp" | sudo tee -a  /etc/hosts > /dev/null

            sudo /bin/systemctl daemon-reload
            sudo systemctl start elasticsearch.service

            # Get Kibana-configuration file from S3 bucket, also steps to install.
            # Kibana Server Installation
            cd /tmp
            sudo wget https://artifacts.elastic.co/downloads/kibana/kibana-5.5.2-x86_64.rpm

            # To install Kibana  run the following:
            sudo yum install -y kibana-5.5.2-x86_64.rpm

            # create Logging Directory
            sudo mkdir -p /app/log/kibana

            # Set Directory and File Permissions for Tiffany Co.
            cd /etc/kibana
            sudo chown root:$srvcAcntName kibana.yml
            sudo chown -R elasticsearch:kibana /app/

            cd /tmp
            wget https://s3.amazonaws.com/${S3EDHScriptsBucketName}/Elasticsearch/Scripts/kibana-configuration.sh
            dos2unix kibana-configuration.sh
            chmod +x kibana-configuration.sh
            ./kibana-configuration.sh

            ESKibSelfIp=$(hostname -I | head -1 | awk  '{print $1}')
            echo "elasticsearch.url: \"https://$ESKibSelfIp:9200\"" | sudo tee -a /etc/kibana/kibana.yml > /dev/null
            echo "server.host: $ESKibSelfIp" | sudo tee -a /etc/kibana/kibana.yml > /dev/null

            sudo systemctl daemon-reload
            sudo systemctl enable kibana.service
            sudo systemctl start kibana.service

            reboot
            --//
      Tags:
        - Key: Name
          Value: !Sub ${ESKibanaServerName}01
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchKibanaInstanceVolume:
    Type: AWS::EC2::Volume
    Condition: LaunchKibanaNode
    DependsOn:
      - ElasticSearchKibanaInstance
    Properties:
      AutoEnableIO: true
      AvailabilityZone: !GetAtt ElasticSearchKibanaInstance.AvailabilityZone
      Encrypted: true
      Size: !Ref ESInstanceVolumeSize
      VolumeType: !Ref ESInstanceVolumeType
      Tags:
        - Key: Name
          Value: !Sub ${ESKibanaServerName}01/app
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchKibanaInstanceAttachVolume:
    Condition: LaunchKibanaNode
    DependsOn:
      - ElasticSearchKibanaInstance
      - ElasticSearchKibanaInstanceVolume
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref ElasticSearchKibanaInstance
      VolumeId: !Ref ElasticSearchKibanaInstanceVolume

# Data Node Instances
  ElasticSearchServerDataNode1:
    Type: AWS::EC2::Instance
    Condition: LaunchOneDataInstance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: !Ref ESInstanceVolumeSize
          VolumeType: !Ref ESInstanceVolumeType
      SubnetId: !Ref ESSubnetIds
      ImageId: !Ref ESAmiID
      InstanceType: !Ref ESInstanceType
      SecurityGroupIds:
        - !GetAtt ElasticSearchSecurityGroup.GroupId  
      KeyName: !Ref ESKeyPairName
      IamInstanceProfile: !Ref ElasticSearchInstanceProfile
      EbsOptimized: true
      SourceDestCheck: true
      UserData:
        Fn::Base64:
          !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0

            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]

            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"

            #!/bin/bash -xe
            exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1

            # PRE-REQUISITE INSTALLATION
            cd /tmp
            sudo yum install -y wget dos2unix

            #create elastic search user
            group=elasticsearch
            if grep -q $group /etc/group
            then
              echo "group exists"
            else
              groupadd -g 598 elasticsearch
              useradd -u 997 -g 598 -c "elasticsearch user" -s /sbin/nologin -M elasticsearch
              chage -I -1 -m 0 -M 99999 -E -1 elasticsearch
            fi

            # INSTALLATION OF PACKAGES.
            FILE=/var/tmp/ESGenericPckgInstalled
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Set Timezone
              timedatectl set-timezone ${ESTimeZone}

              cd /tmp
              yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
              yum update -y
              yum install zip unzip bind-utils traceroute lvm2 wget -y
              yum install nvme-cli -y

              # Install SSM Agent
              cd /tmp
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              #Install AWS CLI
              cd /tmp
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              rm ./awscli-bundle.zip
              rm -rf ./awscli-bundle

              cd /tmp
              #Install cloudwatch monitoring scripts
              yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo="rhui-REGION-rhel-server-optional" -y cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon
              #Enable crontab to send MemoryUtilization metric to cloudWatch.
              #TODO: Comeback: if crontab is empty below command exits script.
              #sudo crontab -l > EsCldWatchCronFile
              echo "*/5 * * * * /tmp/aws-scripts-mon/mon-put-instance-data.pl --mem-used-incl-cache-buff --mem-util --disk-space-util --disk-path=/ --from-cron" >> EsCldWatchCronFile
              sudo crontab EsCldWatchCronFile
              sudo rm EsCldWatchCronFile

              #Install packages for AD
              yum install -y sssd realmd krb5-workstation oddjob oddjob-mkhomedir samba-common-tools

              touch /var/tmp/ESGenericPckgInstalled
            fi

            # USING AWS CLI, PUT AND GET VALUES FROM PARAMETER STORE AND SET HOSTNAME.
            # Set Hostname
            region=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $(NF-1)}')
            ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            host_name=$(/usr/local/bin/aws ec2 --region "$region" describe-tags --filters Name=resource-id,Values="$ec2_instance_id" Name=key,Values=Name --query Tags[].Value --output text)
            hostnamectl set-hostname "$host_name"
            hostnamectl status
            #To persist the change
            echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg

            # USER AND GROUP CONFIGURATION - OS, ELASTICSEARCH, KIBANA.
            #create users with root privs
            count0=0
            for i in apathros ; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                user_created=$(id -u $i > /dev/null 2>&1; echo $?)
                  if [ $user_created -eq 0 ]; then
                    mkdir -p /home/$i/.ssh
                    touch /home/$i/.ssh/authorized_keys
                    chown -R $i:$i /home/$i/.ssh
                    chmod 700 /home/$i/.ssh
                    chmod 600 /home/$i/.ssh/authorized_keys
                    #echo "$i ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key" >> /home/apathros/.ssh/authorized_keys

                    chage -I -1 -m 0 -M 99999 -E -1 $i
                    count0=1
                  fi
              else
                echo "user $i does exist."
              fi
            done

            ADMINS=apathros
            #creation of  the  Linux user-accounts with a temporary password.
            user_accounts=${ESUsersList}
            echo "users in user_accounts are $user_accounts"
            IFS=,
            field_separator=$IFS

            count1=0
            for i in $user_accounts; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                echo "$i:T!emp123" | chpasswd
                passwd -e $i
                ADMINS="$ADMINS,$i"
                count1=1
              else
                echo "user $i exist."
              fi
            done

            if [ $count0 -eq 1 -o $count1 -eq 1 ]; then
              IFS=$field_separator
              echo -e "\nUser_Alias ES_ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "User_Alias ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "ADMINS ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            fi

            #Enable password based Authentication
            #update PasswordAuthentication from No to Yes in /etc/ssh/sshd_config and then restart sshd using systemctl restart sshd

            host_name=$(hostname -s)
            echo "hostname set is $host_name"
            if [ ${Env} == "PROD" ]; then
              srvcAcntName=svc_esprod
              label=$host_name
            else
              if [ ${Env} == "TEST" ]; then
                srvcAcntName=svc_estest
                label=$host_name
              else
                if [ ${Env} == "STG" ]; then
                  srvcAcntName=svc_esstg
                  label=$host_name
                else
                  if [ ${Env} == "DEV" ]; then
                    srvcAcntName=svc_esdev
                    label=$host_name
                  else
                    if [ ${Env} == "QA" ]; then
                      srvcAcntName=svc_esqa
                      label=$host_name
                    fi
                  fi
                fi
              fi
            fi

            #create service account and group
            if grep -q $srvcAcntName /etc/group
            then
              echo "group $srvcAcntName exists"
            else
              groupadd -g 3000 $srvcAcntName
              useradd -u 3000 -g 3000 $srvcAcntName
              chage -I -1 -m 0 -M 99999 -E -1 $srvcAcntName
            fi

            echo -e "\n# Access to $srvcAcntName,elasticsearch accounts" >> /etc/sudoers
            echo -e "$ADMINS ALL=($srvcAcntName,elasticsearch)  ALL" >> /etc/sudoers

            echo -e "\n# Access to administer elasticsearch service" >> /etc/sudoers
            echo -e "$ADMINS  ALL=(root) /usr/bin/systemctl daemon-reload, /usr/bin/systemctl start elasticsearch.service, /usr/bin/systemctl stop elasticsearch.service,  /usr/bin/systemctl status elasticsearch.service, /usr/sbin/service kibana start, /usr/sbin/service kibana stop, /usr/sbin/service kibana status, /usr/share/elasticsearch/bin/elasticsearch-plugin, /usr/share/elasticsearch/bin/x-pack/users, /usr/share/elasticsearch/bin/x-pack/certgen" >> /etc/sudoers

            #operations pertaining to the /app filesystem
            mkdir /app

            app_device=`lsblk | awk '{print $1}'| tail -1`

            if [ "$app_device" = "nvme1n1" ]; then
              mkfs.ext4 /dev/"$app_device"
              e2label /dev/"$app_device" $label
              immutable=`lsattr /etc/fstab | awk -F- '{print $5}'`
              if [ "$immutable" = "i" ]; then chattr -i /etc/fstab ; fi
              lsattr /etc/fstab
              echo "LABEL=$label /app ext4 noatime,rw 1 2" >> /etc/fstab
              mount -a
              chown -R elasticsearch.$srvcAcntName /app
              ls -ld /app
              df -h /app
            else
              echo -e "The app device/volume is "$app_device" when the expected value was nvme1n1. So the filesystem and label were not created on it."
            fi

            FILE=/var/tmp/ESSpecificPckgInstalledAndConfigured
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Install ESEARCH.
              sudo yum install -y install java-1.8.0-openjdk
              wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.rpm
              sudo yum install -y elasticsearch-5.5.2.rpm
              sudo /bin/systemctl daemon-reload
              sudo /bin/systemctl enable elasticsearch.service
              sudo sed -i 's/#LimitMEMLOCK/LimitMEMLOCK/g' /usr/lib/systemd/system/elasticsearch.service
              # configure 3g to 30g, due to storage limitation have reduced the size.
              sudo sed -i 's/Xms2g/Xms10g/g' /etc/elasticsearch/jvm.options
              sudo sed -i 's/Xmx2g/Xmx10g/g' /etc/elasticsearch/jvm.options
              {
                echo "#Elasticsearch Specific Settings"
                echo "vm.max_map_count=262144"
                echo "vm.swappiness=1"
              } | sudo tee -a /etc/sysctl.conf > /dev/null
              {
                echo "#Elasticsearch Specific Settings"
                echo "elasticsearch  -  nofile  65536"
                echo "elasticsearch  hard  nproc  65536"
                echo "elasticsearch  soft  nproc  65536"
              } | sudo tee -a /etc/security/limits.conf > /dev/null
              sudo mkdir -p /app/data/lib/elasticsearch
              sudo mkdir -p /app/log/elasticsearch
              sudo chown elasticsearch:$srvcAcntName /etc/elasticsearch/elasticsearch.yml
              cd /app
              sudo chown elasticsearch:$srvcAcntName -R .
              cd /tmp
              wget https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/discovery-ec2/discovery-ec2-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/repository-s3/repository-s3-5.5.2.zip

              cd /usr/share/elasticsearch/
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/x-pack-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/discovery-ec2-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/repository-s3-5.5.2.zip

              sudo chown -R elasticsearch:$srvcAcntName /etc/elasticsearch/repository-s3

              # GET ESEARCH CONFIGURATION SCRIPTS FROM S3 BUCKET.
              cd /tmp
              wget https://s3.amazonaws.com/${S3EDHScriptsBucketName}/Elasticsearch/Scripts/elasticsearch-configuration.sh
              dos2unix elasticsearch-configuration.sh
              chmod +x elasticsearch-configuration.sh
              ./elasticsearch-configuration.sh

              # APPLICATION CONFIGURATION.
              ldapbindpswd=$(aws ssm get-parameter --name ${ESParmStrLDAPBindPswd} --region us-east-1 --query "Parameter.Value" --output text)
              echo "LDAP Bind Password: $ldapbindpswd"
              echo "xpack.security.authc.realms.ldap1.bind_password: $ldapbindpswd" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "xpack.security.authc.realms.ldap1.url: [\"ldap://amzdcawsp01:3268\",\"ldap://amzdcawsp02:3268\"]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "10.192.15.11 AMZDCAWSP01 amzdcawsp01 amzdcawsp01.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "10.192.16.11 AMZDCAWSP02 amzdcawsp02 amzdcawsp02.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "172.16.176.51 smtp.tiffco.net smtp" | sudo tee -a  /etc/hosts > /dev/null

              # NODE SPECIFIC CONFIGURATION
              nodeName=3
              echo "node.name: elasticsearch-prod-datanode-$nodeName" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "node.master: false" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "node.data: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              #Installation and Configuration happened successfully.
              touch /var/tmp/ESSpecificPckgInstalledAndConfigured
            fi

            if [ ${NodesInCluster} -ge 3 ]; then
              # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes. In Test and Staging this value will be 1 and for PROD 2.
              echo "discovery.zen.minimum_master_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "gateway.recover_after_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode1pvtip

              masternode2pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeTwoPvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode2pvtip

              masternode3pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeThreePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode3pvtip

              echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\"", \""$masternode2pvtip\"", \""$masternode3pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
            else
              if [ ${NodesInCluster} -lt 3 ]; then
                # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes. In Test and Staging this value will be 1 and for PROD 2.
                echo "discovery.zen.minimum_master_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                echo "gateway.recover_after_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

                masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
                echo $masternode1pvtip

                echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                fi
            fi

            # Configuration Done, Lets Enable and START the Application
            sudo /bin/systemctl daemon-reload
            sudo systemctl start elasticsearch.service

            reboot
            --//
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}04
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerDataNodeVolume1:
    Type: AWS::EC2::Volume
    DependsOn:
      - ElasticSearchServerDataNode1
    Condition: LaunchOneDataInstance
    Properties:
      AutoEnableIO: true
      AvailabilityZone: !GetAtt ElasticSearchServerDataNode1.AvailabilityZone
      Encrypted: true
      Size: !Ref ESInstanceVolumeSize
      VolumeType: !Ref ESInstanceVolumeType
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}04/app
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerDataAttachNodeVolume1:
    Type: AWS::EC2::VolumeAttachment
    DependsOn:
      - ElasticSearchServerDataNode1
      - ElasticSearchServerDataNodeVolume1
    Condition: LaunchOneDataInstance
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref ElasticSearchServerDataNode1
      VolumeId: !Ref ElasticSearchServerDataNodeVolume1

  ElasticSearchServerDataNode2a:
    Type: AWS::EC2::Instance
    Condition: LaunchTwoDataInstance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: !Ref ESInstanceVolumeSize
          VolumeType: !Ref ESInstanceVolumeType
      SubnetId: !Ref ESSubnetIds
      ImageId: !Ref ESAmiID
      InstanceType: !Ref ESInstanceType
      SecurityGroupIds:
        - !GetAtt ElasticSearchSecurityGroup.GroupId
      KeyName: !Ref ESKeyPairName
      IamInstanceProfile: !Ref ElasticSearchInstanceProfile
      EbsOptimized: true
      SourceDestCheck: true
      UserData:
        Fn::Base64:
          !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0

            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]

            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"

            #!/bin/bash -xe
            exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1

            # PRE-REQUISITE INSTALLATION
            cd /tmp
            sudo yum install -y wget dos2unix

            #create elastic search user
            group=elasticsearch
            if grep -q $group /etc/group
            then
              echo "group exists"
            else
              groupadd -g 598 elasticsearch
              useradd -u 997 -g 598 -c "elasticsearch user" -s /sbin/nologin -M elasticsearch
              chage -I -1 -m 0 -M 99999 -E -1 elasticsearch
            fi

            # INSTALLATION OF PACKAGES.
            FILE=/var/tmp/ESGenericPckgInstalled
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Set Timezone
              timedatectl set-timezone ${ESTimeZone}

              cd /tmp
              yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
              yum update -y
              yum install zip unzip bind-utils traceroute lvm2 wget -y
              yum install nvme-cli -y

              # Install SSM Agent
              cd /tmp
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              #Install AWS CLI
              cd /tmp
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              rm ./awscli-bundle.zip
              rm -rf ./awscli-bundle

              cd /tmp
              #Install cloudwatch monitoring scripts
              yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo="rhui-REGION-rhel-server-optional" -y cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon
              #Enable crontab to send MemoryUtilization metric to cloudWatch.
              #TODO: Comeback: if crontab is empty below command exits script.
              #sudo crontab -l > EsCldWatchCronFile
              echo "*/5 * * * * /tmp/aws-scripts-mon/mon-put-instance-data.pl --mem-used-incl-cache-buff --mem-util --disk-space-util --disk-path=/ --from-cron" >> EsCldWatchCronFile
              sudo crontab EsCldWatchCronFile
              sudo rm EsCldWatchCronFile

              #Install packages for AD
              yum install -y sssd realmd krb5-workstation oddjob oddjob-mkhomedir samba-common-tools

              touch /var/tmp/ESGenericPckgInstalled
            fi

            # USING AWS CLI, PUT AND GET VALUES FROM PARAMETER STORE AND SET HOSTNAME.
            # Set Hostname
            region=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $(NF-1)}')
            ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            host_name=$(/usr/local/bin/aws ec2 --region "$region" describe-tags --filters Name=resource-id,Values="$ec2_instance_id" Name=key,Values=Name --query Tags[].Value --output text)
            hostnamectl set-hostname "$host_name"
            hostnamectl status
            #To persist the change
            echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg

            # USER AND GROUP CONFIGURATION - OS, ELASTICSEARCH, KIBANA.
            #create users with root privs
            count0=0
            for i in apathros ; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                user_created=$(id -u $i > /dev/null 2>&1; echo $?)
                  if [ $user_created -eq 0 ]; then
                    mkdir -p /home/$i/.ssh
                    touch /home/$i/.ssh/authorized_keys
                    chown -R $i:$i /home/$i/.ssh
                    chmod 700 /home/$i/.ssh
                    chmod 600 /home/$i/.ssh/authorized_keys
                    #echo "$i ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key" >> /home/apathros/.ssh/authorized_keys

                    chage -I -1 -m 0 -M 99999 -E -1 $i
                    count0=1
                  fi
              else
                echo "user $i does exist."
              fi
            done

            ADMINS=apathros
            #creation of  the  Linux user-accounts with a temporary password.
            user_accounts=${ESUsersList}
            echo "users in user_accounts are $user_accounts"
            IFS=,
            field_separator=$IFS

            count1=0
            for i in $user_accounts; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                echo "$i:T!emp123" | chpasswd
                passwd -e $i
                ADMINS="$ADMINS,$i"
                count1=1
              else
                echo "user $i exist."
              fi
            done

            if [ $count0 -eq 1 -o $count1 -eq 1 ]; then
              IFS=$field_separator
              echo -e "\nUser_Alias ES_ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "User_Alias ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "ADMINS ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            fi

            #Enable password based Authentication
            #update PasswordAuthentication from No to Yes in /etc/ssh/sshd_config and then restart sshd using systemctl restart sshd

            host_name=$(hostname -s)
            echo "hostname set is $host_name"
            if [ ${Env} == "PROD" ]; then
              srvcAcntName=svc_esprod
              label=$host_name
            else
              if [ ${Env} == "TEST" ]; then
                srvcAcntName=svc_estest
                label=$host_name
              else
                if [ ${Env} == "STG" ]; then
                  srvcAcntName=svc_esstg
                  label=$host_name
                else
                  if [ ${Env} == "DEV" ]; then
                    srvcAcntName=svc_esdev
                    label=$host_name
                  else
                    if [ ${Env} == "QA" ]; then
                      srvcAcntName=svc_esqa
                      label=$host_name
                    fi
                  fi
                fi
              fi
            fi

            #create service account and group
            if grep -q $srvcAcntName /etc/group
            then
              echo "group $srvcAcntName exists"
            else
              groupadd -g 3000 $srvcAcntName
              useradd -u 3000 -g 3000 $srvcAcntName
              chage -I -1 -m 0 -M 99999 -E -1 $srvcAcntName
            fi

            echo -e "\n# Access to $srvcAcntName,elasticsearch accounts" >> /etc/sudoers
            echo -e "$ADMINS ALL=($srvcAcntName,elasticsearch)  ALL" >> /etc/sudoers

            echo -e "\n# Access to administer elasticsearch service" >> /etc/sudoers
            echo -e "$ADMINS  ALL=(root) /usr/bin/systemctl daemon-reload, /usr/bin/systemctl start elasticsearch.service, /usr/bin/systemctl stop elasticsearch.service,  /usr/bin/systemctl status elasticsearch.service, /usr/sbin/service kibana start, /usr/sbin/service kibana stop, /usr/sbin/service kibana status, /usr/share/elasticsearch/bin/elasticsearch-plugin, /usr/share/elasticsearch/bin/x-pack/users, /usr/share/elasticsearch/bin/x-pack/certgen" >> /etc/sudoers

            #operations pertaining to the /app filesystem
            mkdir /app

            app_device=`lsblk | awk '{print $1}'| tail -1`

            if [ "$app_device" = "nvme1n1" ]; then
              mkfs.ext4 /dev/"$app_device"
              e2label /dev/"$app_device" $label
              immutable=`lsattr /etc/fstab | awk -F- '{print $5}'`
              if [ "$immutable" = "i" ]; then chattr -i /etc/fstab ; fi
              lsattr /etc/fstab
              echo "LABEL=$label /app ext4 noatime,rw 1 2" >> /etc/fstab
              mount -a
              chown -R elasticsearch.$srvcAcntName /app
              ls -ld /app
              df -h /app
            else
              echo -e "The app device/volume is "$app_device" when the expected value was nvme1n1. So the filesystem and label were not created on it."
            fi

            FILE=/var/tmp/ESSpecificPckgInstalledAndConfigured
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Install ESEARCH.
              sudo yum install -y install java-1.8.0-openjdk
              wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.rpm
              sudo yum install -y elasticsearch-5.5.2.rpm
              sudo /bin/systemctl daemon-reload
              sudo /bin/systemctl enable elasticsearch.service
              sudo sed -i 's/#LimitMEMLOCK/LimitMEMLOCK/g' /usr/lib/systemd/system/elasticsearch.service
              # configure 3g to 30g, due to storage limitation have reduced the size.
              sudo sed -i 's/Xms2g/Xms10g/g' /etc/elasticsearch/jvm.options
              sudo sed -i 's/Xmx2g/Xmx10g/g' /etc/elasticsearch/jvm.options
              {
                echo "#Elasticsearch Specific Settings"
                echo "vm.max_map_count=262144"
                echo "vm.swappiness=1"
              } | sudo tee -a /etc/sysctl.conf > /dev/null
              {
                echo "#Elasticsearch Specific Settings"
                echo "elasticsearch  -  nofile  65536"
                echo "elasticsearch  hard  nproc  65536"
                echo "elasticsearch  soft  nproc  65536"
              } | sudo tee -a /etc/security/limits.conf > /dev/null
              sudo mkdir -p /app/data/lib/elasticsearch
              sudo mkdir -p /app/log/elasticsearch
              sudo chown elasticsearch:$srvcAcntName /etc/elasticsearch/elasticsearch.yml
              cd /app
              sudo chown elasticsearch:$srvcAcntName -R .
              cd /tmp
              wget https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/discovery-ec2/discovery-ec2-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/repository-s3/repository-s3-5.5.2.zip

              cd /usr/share/elasticsearch/
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/x-pack-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/discovery-ec2-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/repository-s3-5.5.2.zip

              sudo chown -R elasticsearch:$srvcAcntName /etc/elasticsearch/repository-s3

              # GET ESEARCH CONFIGURATION SCRIPTS FROM S3 BUCKET.
              cd /tmp
              wget https://s3.amazonaws.com/${S3EDHScriptsBucketName}/Elasticsearch/Scripts/elasticsearch-configuration.sh
              dos2unix elasticsearch-configuration.sh
              chmod +x elasticsearch-configuration.sh
              ./elasticsearch-configuration.sh

              # APPLICATION CONFIGURATION.
              ldapbindpswd=$(aws ssm get-parameter --name ${ESParmStrLDAPBindPswd} --region us-east-1 --query "Parameter.Value" --output text)
              echo "LDAP Bind Password: $ldapbindpswd"
              echo "xpack.security.authc.realms.ldap1.bind_password: $ldapbindpswd" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "xpack.security.authc.realms.ldap1.url: [\"ldap://amzdcawsp01:3268\",\"ldap://amzdcawsp02:3268\"]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "10.192.15.11 AMZDCAWSP01 amzdcawsp01 amzdcawsp01.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "10.192.16.11 AMZDCAWSP02 amzdcawsp02 amzdcawsp02.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "172.16.176.51 smtp.tiffco.net smtp" | sudo tee -a  /etc/hosts > /dev/null

              # NODE SPECIFIC CONFIGURATION
              nodeName=3
              echo "node.name: elasticsearch-prod-datanode-$nodeName" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "node.master: false" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "node.data: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              #Installation and Configuration happened successfully.
              touch /var/tmp/ESSpecificPckgInstalledAndConfigured
            fi

            if [ ${NodesInCluster} -ge 3 ]; then
              # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes. In Test and Staging this value will be 1 and for PROD 2.
              echo "discovery.zen.minimum_master_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "gateway.recover_after_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode1pvtip

              masternode2pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeTwoPvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode2pvtip

              masternode3pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeThreePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode3pvtip

              echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\"", \""$masternode2pvtip\"", \""$masternode3pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
            else
              if [ ${NodesInCluster} -lt 3 ]; then
                # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes. In Test and Staging this value will be 1 and for PROD 2.
                echo "discovery.zen.minimum_master_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                echo "gateway.recover_after_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

                masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
                echo $masternode1pvtip

                echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                fi
            fi

            # Configuration Done, Lets Enable and START the Application
            sudo /bin/systemctl daemon-reload
            sudo systemctl start elasticsearch.service

            reboot
            --//
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}04
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerDataNodeVolume2a:
    Type: AWS::EC2::Volume
    DependsOn:
      - ElasticSearchServerDataNode2a
    Condition: LaunchTwoDataInstance
    Properties:
      AutoEnableIO: true
      AvailabilityZone: !GetAtt ElasticSearchServerDataNode2a.AvailabilityZone
      Encrypted: true
      Size: !Ref ESInstanceVolumeSize
      VolumeType: !Ref ESInstanceVolumeType
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}04/app
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerDataAttachNodeVolume2a:
    Type: AWS::EC2::VolumeAttachment
    DependsOn:
      - ElasticSearchServerDataNode2a
      - ElasticSearchServerDataNodeVolume2a
    Condition: LaunchTwoDataInstance
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref ElasticSearchServerDataNode2a
      VolumeId: !Ref ElasticSearchServerDataNodeVolume2a

  ElasticSearchServerDataNode2b:
    Type: AWS::EC2::Instance
    Condition: LaunchTwoDataInstance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: !Ref ESInstanceVolumeSize
          VolumeType: !Ref ESInstanceVolumeType
      SubnetId: !Ref ESSubnetIds
      ImageId: !Ref ESAmiID
      InstanceType: !Ref ESInstanceType
      SecurityGroupIds:
        - !GetAtt ElasticSearchSecurityGroup.GroupId 
      KeyName: !Ref ESKeyPairName
      IamInstanceProfile: !Ref ElasticSearchInstanceProfile
      EbsOptimized: true
      SourceDestCheck: true
      UserData:
        Fn::Base64:
          !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0

            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]

            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"

            #!/bin/bash -xe
            exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1

            # PRE-REQUISITE INSTALLATION
            cd /tmp
            sudo yum install -y wget dos2unix

            #create elastic search user
            group=elasticsearch
            if grep -q $group /etc/group
            then
              echo "group exists"
            else
              groupadd -g 598 elasticsearch
              useradd -u 997 -g 598 -c "elasticsearch user" -s /sbin/nologin -M elasticsearch
              chage -I -1 -m 0 -M 99999 -E -1 elasticsearch
            fi

            # INSTALLATION OF PACKAGES.
            FILE=/var/tmp/ESGenericPckgInstalled
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Set Timezone
              timedatectl set-timezone ${ESTimeZone}

              cd /tmp
              yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
              yum update -y
              yum install zip unzip bind-utils traceroute lvm2 wget -y
              yum install nvme-cli -y

              # Install SSM Agent
              cd /tmp
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              #Install AWS CLI
              cd /tmp
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              rm ./awscli-bundle.zip
              rm -rf ./awscli-bundle

              cd /tmp
              #Install cloudwatch monitoring scripts
              yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo="rhui-REGION-rhel-server-optional" -y cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon
              #Enable crontab to send MemoryUtilization metric to cloudWatch.
              #TODO: Comeback: if crontab is empty below command exits script.
              #sudo crontab -l > EsCldWatchCronFile
              echo "*/5 * * * * /tmp/aws-scripts-mon/mon-put-instance-data.pl --mem-used-incl-cache-buff --mem-util --disk-space-util --disk-path=/ --from-cron" >> EsCldWatchCronFile
              sudo crontab EsCldWatchCronFile
              sudo rm EsCldWatchCronFile

              #Install packages for AD
              yum install -y sssd realmd krb5-workstation oddjob oddjob-mkhomedir samba-common-tools

              touch /var/tmp/ESGenericPckgInstalled
            fi

            # USING AWS CLI, PUT AND GET VALUES FROM PARAMETER STORE AND SET HOSTNAME.
            # Set Hostname
            region=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $(NF-1)}')
            ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            host_name=$(/usr/local/bin/aws ec2 --region "$region" describe-tags --filters Name=resource-id,Values="$ec2_instance_id" Name=key,Values=Name --query Tags[].Value --output text)
            hostnamectl set-hostname "$host_name"
            hostnamectl status
            #To persist the change
            echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg

            # USER AND GROUP CONFIGURATION - OS, ELASTICSEARCH, KIBANA.
            #create users with root privs
            count0=0
            for i in apathros ; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                user_created=$(id -u $i > /dev/null 2>&1; echo $?)
                  if [ $user_created -eq 0 ]; then
                    mkdir -p /home/$i/.ssh
                    touch /home/$i/.ssh/authorized_keys
                    chown -R $i:$i /home/$i/.ssh
                    chmod 700 /home/$i/.ssh
                    chmod 600 /home/$i/.ssh/authorized_keys
                    #echo "$i ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key" >> /home/apathros/.ssh/authorized_keys

                    chage -I -1 -m 0 -M 99999 -E -1 $i
                    count0=1
                  fi
              else
                echo "user $i does exist."
              fi
            done

            ADMINS=apathros
            #creation of  the  Linux user-accounts with a temporary password.
            user_accounts=${ESUsersList}
            echo "users in user_accounts are $user_accounts"
            IFS=,
            field_separator=$IFS

            count1=0
            for i in $user_accounts; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                echo "$i:T!emp123" | chpasswd
                passwd -e $i
                ADMINS="$ADMINS,$i"
                count1=1
              else
                echo "user $i exist."
              fi
            done

            if [ $count0 -eq 1 -o $count1 -eq 1 ]; then
              IFS=$field_separator
              echo -e "\nUser_Alias ES_ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "User_Alias ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "ADMINS ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            fi

            #Enable password based Authentication
            #update PasswordAuthentication from No to Yes in /etc/ssh/sshd_config and then restart sshd using systemctl restart sshd

            host_name=$(hostname -s)
            echo "hostname set is $host_name"
            if [ ${Env} == "PROD" ]; then
              srvcAcntName=svc_esprod
              label=$host_name
            else
              if [ ${Env} == "TEST" ]; then
                srvcAcntName=svc_estest
                label=$host_name
              else
                if [ ${Env} == "STG" ]; then
                  srvcAcntName=svc_esstg
                  label=$host_name
                else
                  if [ ${Env} == "DEV" ]; then
                    srvcAcntName=svc_esdev
                    label=$host_name
                  else
                    if [ ${Env} == "QA" ]; then
                      srvcAcntName=svc_esqa
                      label=$host_name
                    fi
                  fi
                fi
              fi
            fi

            #create service account and group
            if grep -q $srvcAcntName /etc/group
            then
              echo "group $srvcAcntName exists"
            else
              groupadd -g 3000 $srvcAcntName
              useradd -u 3000 -g 3000 $srvcAcntName
              chage -I -1 -m 0 -M 99999 -E -1 $srvcAcntName
            fi

            echo -e "\n# Access to $srvcAcntName,elasticsearch accounts" >> /etc/sudoers
            echo -e "$ADMINS ALL=($srvcAcntName,elasticsearch)  ALL" >> /etc/sudoers

            echo -e "\n# Access to administer elasticsearch service" >> /etc/sudoers
            echo -e "$ADMINS  ALL=(root) /usr/bin/systemctl daemon-reload, /usr/bin/systemctl start elasticsearch.service, /usr/bin/systemctl stop elasticsearch.service,  /usr/bin/systemctl status elasticsearch.service, /usr/sbin/service kibana start, /usr/sbin/service kibana stop, /usr/sbin/service kibana status, /usr/share/elasticsearch/bin/elasticsearch-plugin, /usr/share/elasticsearch/bin/x-pack/users, /usr/share/elasticsearch/bin/x-pack/certgen" >> /etc/sudoers

            #operations pertaining to the /app filesystem
            mkdir /app

            app_device=`lsblk | awk '{print $1}'| tail -1`

            if [ "$app_device" = "nvme1n1" ]; then
              mkfs.ext4 /dev/"$app_device"
              e2label /dev/"$app_device" $label
              immutable=`lsattr /etc/fstab | awk -F- '{print $5}'`
              if [ "$immutable" = "i" ]; then chattr -i /etc/fstab ; fi
              lsattr /etc/fstab
              echo "LABEL=$label /app ext4 noatime,rw 1 2" >> /etc/fstab
              mount -a
              chown -R elasticsearch.$srvcAcntName /app
              ls -ld /app
              df -h /app
            else
              echo -e "The app device/volume is "$app_device" when the expected value was nvme1n1. So the filesystem and label were not created on it."
            fi

            FILE=/var/tmp/ESSpecificPckgInstalledAndConfigured
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Install ESEARCH.
              sudo yum install -y install java-1.8.0-openjdk
              wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.rpm
              sudo yum install -y elasticsearch-5.5.2.rpm
              sudo /bin/systemctl daemon-reload
              sudo /bin/systemctl enable elasticsearch.service
              sudo sed -i 's/#LimitMEMLOCK/LimitMEMLOCK/g' /usr/lib/systemd/system/elasticsearch.service
              # configure 3g to 30g, due to storage limitation have reduced the size.
              sudo sed -i 's/Xms2g/Xms10g/g' /etc/elasticsearch/jvm.options
              sudo sed -i 's/Xmx2g/Xmx10g/g' /etc/elasticsearch/jvm.options
              {
                echo "#Elasticsearch Specific Settings"
                echo "vm.max_map_count=262144"
                echo "vm.swappiness=1"
              } | sudo tee -a /etc/sysctl.conf > /dev/null
              {
                echo "#Elasticsearch Specific Settings"
                echo "elasticsearch  -  nofile  65536"
                echo "elasticsearch  hard  nproc  65536"
                echo "elasticsearch  soft  nproc  65536"
              } | sudo tee -a /etc/security/limits.conf > /dev/null
              sudo mkdir -p /app/data/lib/elasticsearch
              sudo mkdir -p /app/log/elasticsearch
              sudo chown elasticsearch:$srvcAcntName /etc/elasticsearch/elasticsearch.yml
              cd /app
              sudo chown elasticsearch:$srvcAcntName -R .
              cd /tmp
              wget https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/discovery-ec2/discovery-ec2-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/repository-s3/repository-s3-5.5.2.zip

              cd /usr/share/elasticsearch/
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/x-pack-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/discovery-ec2-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/repository-s3-5.5.2.zip

              sudo chown -R elasticsearch:$srvcAcntName /etc/elasticsearch/repository-s3

              # GET ESEARCH CONFIGURATION SCRIPTS FROM S3 BUCKET.
              cd /tmp
              wget https://s3.amazonaws.com/${S3EDHScriptsBucketName}/Elasticsearch/Scripts/elasticsearch-configuration.sh
              dos2unix elasticsearch-configuration.sh
              chmod +x elasticsearch-configuration.sh
              ./elasticsearch-configuration.sh

              # APPLICATION CONFIGURATION.
              ldapbindpswd=$(aws ssm get-parameter --name ${ESParmStrLDAPBindPswd} --region us-east-1 --query "Parameter.Value" --output text)
              echo "LDAP Bind Password: $ldapbindpswd"
              echo "xpack.security.authc.realms.ldap1.bind_password: $ldapbindpswd" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "xpack.security.authc.realms.ldap1.url: [\"ldap://amzdcawsp01:3268\",\"ldap://amzdcawsp02:3268\"]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "10.192.15.11 AMZDCAWSP01 amzdcawsp01 amzdcawsp01.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "10.192.16.11 AMZDCAWSP02 amzdcawsp02 amzdcawsp02.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "172.16.176.51 smtp.tiffco.net smtp" | sudo tee -a  /etc/hosts > /dev/null

              # NODE SPECIFIC CONFIGURATION
              nodeName=4
              echo "node.name: elasticsearch-prod-datanode-$nodeName" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "node.master: false" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "node.data: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              #Installation and Configuration happened successfully.
              touch /var/tmp/ESSpecificPckgInstalledAndConfigured
            fi

            if [ ${NodesInCluster} -ge 3 ]; then
              # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes. In Test and Staging this value will be 1 and for PROD 2.
              echo "discovery.zen.minimum_master_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "gateway.recover_after_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode1pvtip

              masternode2pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeTwoPvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode2pvtip

              masternode3pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeThreePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode3pvtip

              echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\"", \""$masternode2pvtip\"", \""$masternode3pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
            else
              if [ ${NodesInCluster} -lt 3 ]; then
                # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes. In Test and Staging this value will be 1 and for PROD 2.
                echo "discovery.zen.minimum_master_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                echo "gateway.recover_after_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

                masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
                echo $masternode1pvtip

                echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                fi
            fi

            # Configuration Done, Lets Enable and START the Application
            sudo /bin/systemctl daemon-reload
            sudo systemctl start elasticsearch.service

            reboot
            --//
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}05
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerDataNodeVolume2b:
    Type: AWS::EC2::Volume
    DependsOn:
      - ElasticSearchServerDataNode2b
    Condition: LaunchTwoDataInstance
    Properties:
      AutoEnableIO: true
      AvailabilityZone: !GetAtt ElasticSearchServerDataNode2b.AvailabilityZone
      Encrypted: true
      Size: !Ref ESInstanceVolumeSize
      VolumeType: !Ref ESInstanceVolumeType
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}05/app
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerDataAttachNodeVolume2b:
    Type: AWS::EC2::VolumeAttachment
    DependsOn:
      - ElasticSearchServerDataNode2b
      - ElasticSearchServerDataNodeVolume2b
    Condition: LaunchTwoDataInstance
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref ElasticSearchServerDataNode2b
      VolumeId: !Ref ElasticSearchServerDataNodeVolume2b

  ElasticSearchServerDataNode3a:
    Type: AWS::EC2::Instance
    Condition: LaunchThreeDataInstance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: !Ref ESInstanceVolumeSize
          VolumeType: !Ref ESInstanceVolumeType
      SubnetId: !Ref ESSubnetIds
      ImageId: !Ref ESAmiID
      InstanceType: !Ref ESInstanceType
      SecurityGroupIds:
        - !GetAtt ElasticSearchSecurityGroup.GroupId 
      KeyName: !Ref ESKeyPairName
      IamInstanceProfile: !Ref ElasticSearchInstanceProfile
      EbsOptimized: true
      SourceDestCheck: true
      UserData:
        Fn::Base64:
          !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0

            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]

            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"

            #!/bin/bash -xe
            exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1

            # PRE-REQUISITE INSTALLATION
            cd /tmp
            sudo yum install -y wget dos2unix

            #create elastic search user
            group=elasticsearch
            if grep -q $group /etc/group
            then
              echo "group exists"
            else
              groupadd -g 598 elasticsearch
              useradd -u 997 -g 598 -c "elasticsearch user" -s /sbin/nologin -M elasticsearch
              chage -I -1 -m 0 -M 99999 -E -1 elasticsearch
            fi

            # INSTALLATION OF PACKAGES.
            FILE=/var/tmp/ESGenericPckgInstalled
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Set Timezone
              timedatectl set-timezone ${ESTimeZone}

              cd /tmp
              yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
              yum update -y
              yum install zip unzip bind-utils traceroute lvm2 wget -y
              yum install nvme-cli -y

              # Install SSM Agent
              cd /tmp
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              #Install AWS CLI
              cd /tmp
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              rm ./awscli-bundle.zip
              rm -rf ./awscli-bundle

              cd /tmp
              #Install cloudwatch monitoring scripts
              yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo="rhui-REGION-rhel-server-optional" -y cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon
              #Enable crontab to send MemoryUtilization metric to cloudWatch.
              #TODO: Comeback: if crontab is empty below command exits script.
              #sudo crontab -l > EsCldWatchCronFile
              echo "*/5 * * * * /tmp/aws-scripts-mon/mon-put-instance-data.pl --mem-used-incl-cache-buff --mem-util --disk-space-util --disk-path=/ --from-cron" >> EsCldWatchCronFile
              sudo crontab EsCldWatchCronFile
              sudo rm EsCldWatchCronFile

              #Install packages for AD
              yum install -y sssd realmd krb5-workstation oddjob oddjob-mkhomedir samba-common-tools

              touch /var/tmp/ESGenericPckgInstalled
            fi

            # USING AWS CLI, PUT AND GET VALUES FROM PARAMETER STORE AND SET HOSTNAME.
            # Set Hostname
            region=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $(NF-1)}')
            ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            host_name=$(/usr/local/bin/aws ec2 --region "$region" describe-tags --filters Name=resource-id,Values="$ec2_instance_id" Name=key,Values=Name --query Tags[].Value --output text)
            hostnamectl set-hostname "$host_name"
            hostnamectl status
            #To persist the change
            echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg

            # USER AND GROUP CONFIGURATION - OS, ELASTICSEARCH, KIBANA.
            #create users with root privs
            count0=0
            for i in apathros ; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                user_created=$(id -u $i > /dev/null 2>&1; echo $?)
                  if [ $user_created -eq 0 ]; then
                    mkdir -p /home/$i/.ssh
                    touch /home/$i/.ssh/authorized_keys
                    chown -R $i:$i /home/$i/.ssh
                    chmod 700 /home/$i/.ssh
                    chmod 600 /home/$i/.ssh/authorized_keys
                    #echo "$i ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key" >> /home/apathros/.ssh/authorized_keys

                    chage -I -1 -m 0 -M 99999 -E -1 $i
                    count0=1
                  fi
              else
                echo "user $i does exist."
              fi
            done

            ADMINS=apathros
            #creation of  the  Linux user-accounts with a temporary password.
            user_accounts=${ESUsersList}
            echo "users in user_accounts are $user_accounts"
            IFS=,
            field_separator=$IFS

            count1=0
            for i in $user_accounts; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                echo "$i:T!emp123" | chpasswd
                passwd -e $i
                ADMINS="$ADMINS,$i"
                count1=1
              else
                echo "user $i exist."
              fi
            done

            if [ $count0 -eq 1 -o $count1 -eq 1 ]; then
              IFS=$field_separator
              echo -e "\nUser_Alias ES_ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "User_Alias ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "ADMINS ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            fi

            #Enable password based Authentication
            #update PasswordAuthentication from No to Yes in /etc/ssh/sshd_config and then restart sshd using systemctl restart sshd

            host_name=$(hostname -s)
            echo "hostname set is $host_name"
            if [ ${Env} == "PROD" ]; then
              srvcAcntName=svc_esprod
              label=$host_name
            else
              if [ ${Env} == "TEST" ]; then
                srvcAcntName=svc_estest
                label=$host_name
              else
                if [ ${Env} == "STG" ]; then
                  srvcAcntName=svc_esstg
                  label=$host_name
                else
                  if [ ${Env} == "DEV" ]; then
                    srvcAcntName=svc_esdev
                    label=$host_name
                  else
                    if [ ${Env} == "QA" ]; then
                      srvcAcntName=svc_esqa
                      label=$host_name
                    fi
                  fi
                fi
              fi
            fi

            #create service account and group
            if grep -q $srvcAcntName /etc/group
            then
              echo "group $srvcAcntName exists"
            else
              groupadd -g 3000 $srvcAcntName
              useradd -u 3000 -g 3000 $srvcAcntName
              chage -I -1 -m 0 -M 99999 -E -1 $srvcAcntName
            fi

            echo -e "\n# Access to $srvcAcntName,elasticsearch accounts" >> /etc/sudoers
            echo -e "$ADMINS ALL=($srvcAcntName,elasticsearch)  ALL" >> /etc/sudoers

            echo -e "\n# Access to administer elasticsearch service" >> /etc/sudoers
            echo -e "$ADMINS  ALL=(root) /usr/bin/systemctl daemon-reload, /usr/bin/systemctl start elasticsearch.service, /usr/bin/systemctl stop elasticsearch.service,  /usr/bin/systemctl status elasticsearch.service, /usr/sbin/service kibana start, /usr/sbin/service kibana stop, /usr/sbin/service kibana status, /usr/share/elasticsearch/bin/elasticsearch-plugin, /usr/share/elasticsearch/bin/x-pack/users, /usr/share/elasticsearch/bin/x-pack/certgen" >> /etc/sudoers

            #operations pertaining to the /app filesystem
            mkdir /app

            app_device=`lsblk | awk '{print $1}'| tail -1`

            if [ "$app_device" = "nvme1n1" ]; then
              mkfs.ext4 /dev/"$app_device"
              e2label /dev/"$app_device" $label
              immutable=`lsattr /etc/fstab | awk -F- '{print $5}'`
              if [ "$immutable" = "i" ]; then chattr -i /etc/fstab ; fi
              lsattr /etc/fstab
              echo "LABEL=$label /app ext4 noatime,rw 1 2" >> /etc/fstab
              mount -a
              chown -R elasticsearch.$srvcAcntName /app
              ls -ld /app
              df -h /app
            else
              echo -e "The app device/volume is "$app_device" when the expected value was nvme1n1. So the filesystem and label were not created on it."
            fi

            FILE=/var/tmp/ESSpecificPckgInstalledAndConfigured
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Install ESEARCH.
              sudo yum install -y install java-1.8.0-openjdk
              wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.rpm
              sudo yum install -y elasticsearch-5.5.2.rpm
              sudo /bin/systemctl daemon-reload
              sudo /bin/systemctl enable elasticsearch.service
              sudo sed -i 's/#LimitMEMLOCK/LimitMEMLOCK/g' /usr/lib/systemd/system/elasticsearch.service
              # configure 3g to 30g, due to storage limitation have reduced the size.
              sudo sed -i 's/Xms2g/Xms10g/g' /etc/elasticsearch/jvm.options
              sudo sed -i 's/Xmx2g/Xmx10g/g' /etc/elasticsearch/jvm.options
              {
                echo "#Elasticsearch Specific Settings"
                echo "vm.max_map_count=262144"
                echo "vm.swappiness=1"
              } | sudo tee -a /etc/sysctl.conf > /dev/null
              {
                echo "#Elasticsearch Specific Settings"
                echo "elasticsearch  -  nofile  65536"
                echo "elasticsearch  hard  nproc  65536"
                echo "elasticsearch  soft  nproc  65536"
              } | sudo tee -a /etc/security/limits.conf > /dev/null
              sudo mkdir -p /app/data/lib/elasticsearch
              sudo mkdir -p /app/log/elasticsearch
              sudo chown elasticsearch:$srvcAcntName /etc/elasticsearch/elasticsearch.yml
              cd /app
              sudo chown elasticsearch:$srvcAcntName -R .
              cd /tmp
              wget https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/discovery-ec2/discovery-ec2-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/repository-s3/repository-s3-5.5.2.zip

              cd /usr/share/elasticsearch/
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/x-pack-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/discovery-ec2-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/repository-s3-5.5.2.zip

              sudo chown -R elasticsearch:$srvcAcntName /etc/elasticsearch/repository-s3

              # GET ESEARCH CONFIGURATION SCRIPTS FROM S3 BUCKET.
              cd /tmp
              wget https://s3.amazonaws.com/${S3EDHScriptsBucketName}/Elasticsearch/Scripts/elasticsearch-configuration.sh
              dos2unix elasticsearch-configuration.sh
              chmod +x elasticsearch-configuration.sh
              ./elasticsearch-configuration.sh

              # APPLICATION CONFIGURATION.
              ldapbindpswd=$(aws ssm get-parameter --name ${ESParmStrLDAPBindPswd} --region us-east-1 --query "Parameter.Value" --output text)
              echo "LDAP Bind Password: $ldapbindpswd"
              echo "xpack.security.authc.realms.ldap1.bind_password: $ldapbindpswd" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "xpack.security.authc.realms.ldap1.url: [\"ldap://amzdcawsp01:3268\",\"ldap://amzdcawsp02:3268\"]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "10.192.15.11 AMZDCAWSP01 amzdcawsp01 amzdcawsp01.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "10.192.16.11 AMZDCAWSP02 amzdcawsp02 amzdcawsp02.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "172.16.176.51 smtp.tiffco.net smtp" | sudo tee -a  /etc/hosts > /dev/null

              # NODE SPECIFIC CONFIGURATION
              nodeName=3
              echo "node.name: elasticsearch-prod-datanode-$nodeName" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "node.master: false" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "node.data: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              #Installation and Configuration happened successfully.
              touch /var/tmp/ESSpecificPckgInstalledAndConfigured
            fi

            if [ ${NodesInCluster} -ge 3 ]; then
              # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes. In Test and Staging this value will be 1 and for PROD 2.
              echo "discovery.zen.minimum_master_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "gateway.recover_after_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode1pvtip

              masternode2pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeTwoPvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode2pvtip

              masternode3pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeThreePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode3pvtip

              echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\"", \""$masternode2pvtip\"", \""$masternode3pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
            else
              if [ ${NodesInCluster} -lt 3 ]; then
                # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes. In Test and Staging this value will be 1 and for PROD 2.
                echo "discovery.zen.minimum_master_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                echo "gateway.recover_after_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

                masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
                echo $masternode1pvtip

                echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                fi
            fi

            # Configuration Done, Lets Enable and START the Application
            sudo /bin/systemctl daemon-reload
            sudo systemctl start elasticsearch.service

            reboot
            --//
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}04
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerDataNodeVolume3a:
    Type: AWS::EC2::Volume
    DependsOn:
      - ElasticSearchServerDataNode3a
    Condition: LaunchThreeDataInstance
    Properties:
      AutoEnableIO: true
      AvailabilityZone: !GetAtt ElasticSearchServerDataNode3a.AvailabilityZone
      Encrypted: true
      Size: !Ref ESInstanceVolumeSize
      VolumeType: !Ref ESInstanceVolumeType
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}04/app
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerDataAttachNodeVolume3a:
    Type: AWS::EC2::VolumeAttachment
    DependsOn:
      - ElasticSearchServerDataNode3a
      - ElasticSearchServerDataNodeVolume3a
    Condition: LaunchThreeDataInstance
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref ElasticSearchServerDataNode3a
      VolumeId: !Ref ElasticSearchServerDataNodeVolume3a

  ElasticSearchServerDataNode3b:
    Type: AWS::EC2::Instance
    Condition: LaunchThreeDataInstance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: !Ref ESInstanceVolumeSize
          VolumeType: !Ref ESInstanceVolumeType
      SubnetId: !Ref ESSubnetIds
      ImageId: !Ref ESAmiID
      InstanceType: !Ref ESInstanceType
      SecurityGroupIds:
        - !GetAtt ElasticSearchSecurityGroup.GroupId 
      KeyName: !Ref ESKeyPairName
      IamInstanceProfile: !Ref ElasticSearchInstanceProfile
      EbsOptimized: true
      SourceDestCheck: true
      UserData:
        Fn::Base64:
          !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0

            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]

            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"

            #!/bin/bash -xe
            exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1

            # PRE-REQUISITE INSTALLATION
            cd /tmp
            sudo yum install -y wget dos2unix

            #create elastic search user
            group=elasticsearch
            if grep -q $group /etc/group
            then
              echo "group exists"
            else
              groupadd -g 598 elasticsearch
              useradd -u 997 -g 598 -c "elasticsearch user" -s /sbin/nologin -M elasticsearch
              chage -I -1 -m 0 -M 99999 -E -1 elasticsearch
            fi

            # INSTALLATION OF PACKAGES.
            FILE=/var/tmp/ESGenericPckgInstalled
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Set Timezone
              timedatectl set-timezone ${ESTimeZone}

              cd /tmp
              yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
              yum update -y
              yum install zip unzip bind-utils traceroute lvm2 wget -y
              yum install nvme-cli -y

              # Install SSM Agent
              cd /tmp
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              #Install AWS CLI
              cd /tmp
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              rm ./awscli-bundle.zip
              rm -rf ./awscli-bundle

              cd /tmp
              #Install cloudwatch monitoring scripts
              yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo="rhui-REGION-rhel-server-optional" -y cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon
              #Enable crontab to send MemoryUtilization metric to cloudWatch.
              #TODO: Comeback: if crontab is empty below command exits script.
              #sudo crontab -l > EsCldWatchCronFile
              echo "*/5 * * * * /tmp/aws-scripts-mon/mon-put-instance-data.pl --mem-used-incl-cache-buff --mem-util --disk-space-util --disk-path=/ --from-cron" >> EsCldWatchCronFile
              sudo crontab EsCldWatchCronFile
              sudo rm EsCldWatchCronFile

              #Install packages for AD
              yum install -y sssd realmd krb5-workstation oddjob oddjob-mkhomedir samba-common-tools

              touch /var/tmp/ESGenericPckgInstalled
            fi

            # USING AWS CLI, PUT AND GET VALUES FROM PARAMETER STORE AND SET HOSTNAME.
            # Set Hostname
            region=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $(NF-1)}')
            ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            host_name=$(/usr/local/bin/aws ec2 --region "$region" describe-tags --filters Name=resource-id,Values="$ec2_instance_id" Name=key,Values=Name --query Tags[].Value --output text)
            hostnamectl set-hostname "$host_name"
            hostnamectl status
            #To persist the change
            echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg

            # USER AND GROUP CONFIGURATION - OS, ELASTICSEARCH, KIBANA.
            #create users with root privs
            count0=0
            for i in apathros ; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                user_created=$(id -u $i > /dev/null 2>&1; echo $?)
                  if [ $user_created -eq 0 ]; then
                    mkdir -p /home/$i/.ssh
                    touch /home/$i/.ssh/authorized_keys
                    chown -R $i:$i /home/$i/.ssh
                    chmod 700 /home/$i/.ssh
                    chmod 600 /home/$i/.ssh/authorized_keys
                    #echo "$i ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key" >> /home/apathros/.ssh/authorized_keys

                    chage -I -1 -m 0 -M 99999 -E -1 $i
                    count0=1
                  fi
              else
                echo "user $i does exist."
              fi
            done

            ADMINS=apathros
            #creation of  the  Linux user-accounts with a temporary password.
            user_accounts=${ESUsersList}
            echo "users in user_accounts are $user_accounts"
            IFS=,
            field_separator=$IFS

            count1=0
            for i in $user_accounts; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                echo "$i:T!emp123" | chpasswd
                passwd -e $i
                ADMINS="$ADMINS,$i"
                count1=1
              else
                echo "user $i exist."
              fi
            done

            if [ $count0 -eq 1 -o $count1 -eq 1 ]; then
              IFS=$field_separator
              echo -e "\nUser_Alias ES_ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "User_Alias ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "ADMINS ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            fi

            #Enable password based Authentication
            #update PasswordAuthentication from No to Yes in /etc/ssh/sshd_config and then restart sshd using systemctl restart sshd

            host_name=$(hostname -s)
            echo "hostname set is $host_name"
            if [ ${Env} == "PROD" ]; then
              srvcAcntName=svc_esprod
              label=$host_name
            else
              if [ ${Env} == "TEST" ]; then
                srvcAcntName=svc_estest
                label=$host_name
              else
                if [ ${Env} == "STG" ]; then
                  srvcAcntName=svc_esstg
                  label=$host_name
                else
                  if [ ${Env} == "DEV" ]; then
                    srvcAcntName=svc_esdev
                    label=$host_name
                  else
                    if [ ${Env} == "QA" ]; then
                      srvcAcntName=svc_esqa
                      label=$host_name
                    fi
                  fi
                fi
              fi
            fi

            #create service account and group
            if grep -q $srvcAcntName /etc/group
            then
              echo "group $srvcAcntName exists"
            else
              groupadd -g 3000 $srvcAcntName
              useradd -u 3000 -g 3000 $srvcAcntName
              chage -I -1 -m 0 -M 99999 -E -1 $srvcAcntName
            fi

            echo -e "\n# Access to $srvcAcntName,elasticsearch accounts" >> /etc/sudoers
            echo -e "$ADMINS ALL=($srvcAcntName,elasticsearch)  ALL" >> /etc/sudoers

            echo -e "\n# Access to administer elasticsearch service" >> /etc/sudoers
            echo -e "$ADMINS  ALL=(root) /usr/bin/systemctl daemon-reload, /usr/bin/systemctl start elasticsearch.service, /usr/bin/systemctl stop elasticsearch.service,  /usr/bin/systemctl status elasticsearch.service, /usr/sbin/service kibana start, /usr/sbin/service kibana stop, /usr/sbin/service kibana status, /usr/share/elasticsearch/bin/elasticsearch-plugin, /usr/share/elasticsearch/bin/x-pack/users, /usr/share/elasticsearch/bin/x-pack/certgen" >> /etc/sudoers

            #operations pertaining to the /app filesystem
            mkdir /app

            app_device=`lsblk | awk '{print $1}'| tail -1`

            if [ "$app_device" = "nvme1n1" ]; then
              mkfs.ext4 /dev/"$app_device"
              e2label /dev/"$app_device" $label
              immutable=`lsattr /etc/fstab | awk -F- '{print $5}'`
              if [ "$immutable" = "i" ]; then chattr -i /etc/fstab ; fi
              lsattr /etc/fstab
              echo "LABEL=$label /app ext4 noatime,rw 1 2" >> /etc/fstab
              mount -a
              chown -R elasticsearch.$srvcAcntName /app
              ls -ld /app
              df -h /app
            else
              echo -e "The app device/volume is "$app_device" when the expected value was nvme1n1. So the filesystem and label were not created on it."
            fi

            FILE=/var/tmp/ESSpecificPckgInstalledAndConfigured
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Install ESEARCH.
              sudo yum install -y install java-1.8.0-openjdk
              wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.rpm
              sudo yum install -y elasticsearch-5.5.2.rpm
              sudo /bin/systemctl daemon-reload
              sudo /bin/systemctl enable elasticsearch.service
              sudo sed -i 's/#LimitMEMLOCK/LimitMEMLOCK/g' /usr/lib/systemd/system/elasticsearch.service
              # configure 3g to 30g, due to storage limitation have reduced the size.
              sudo sed -i 's/Xms2g/Xms10g/g' /etc/elasticsearch/jvm.options
              sudo sed -i 's/Xmx2g/Xmx10g/g' /etc/elasticsearch/jvm.options
              {
                echo "#Elasticsearch Specific Settings"
                echo "vm.max_map_count=262144"
                echo "vm.swappiness=1"
              } | sudo tee -a /etc/sysctl.conf > /dev/null
              {
                echo "#Elasticsearch Specific Settings"
                echo "elasticsearch  -  nofile  65536"
                echo "elasticsearch  hard  nproc  65536"
                echo "elasticsearch  soft  nproc  65536"
              } | sudo tee -a /etc/security/limits.conf > /dev/null
              sudo mkdir -p /app/data/lib/elasticsearch
              sudo mkdir -p /app/log/elasticsearch
              sudo chown elasticsearch:$srvcAcntName /etc/elasticsearch/elasticsearch.yml
              cd /app
              sudo chown elasticsearch:$srvcAcntName -R .
              cd /tmp
              wget https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/discovery-ec2/discovery-ec2-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/repository-s3/repository-s3-5.5.2.zip

              cd /usr/share/elasticsearch/
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/x-pack-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/discovery-ec2-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/repository-s3-5.5.2.zip

              sudo chown -R elasticsearch:$srvcAcntName /etc/elasticsearch/repository-s3

              # GET ESEARCH CONFIGURATION SCRIPTS FROM S3 BUCKET.
              cd /tmp
              wget https://s3.amazonaws.com/${S3EDHScriptsBucketName}/Elasticsearch/Scripts/elasticsearch-configuration.sh
              dos2unix elasticsearch-configuration.sh
              chmod +x elasticsearch-configuration.sh
              ./elasticsearch-configuration.sh

              # APPLICATION CONFIGURATION.
              ldapbindpswd=$(aws ssm get-parameter --name ${ESParmStrLDAPBindPswd} --region us-east-1 --query "Parameter.Value" --output text)
              echo "LDAP Bind Password: $ldapbindpswd"
              echo "xpack.security.authc.realms.ldap1.bind_password: $ldapbindpswd" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "xpack.security.authc.realms.ldap1.url: [\"ldap://amzdcawsp01:3268\",\"ldap://amzdcawsp02:3268\"]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "10.192.15.11 AMZDCAWSP01 amzdcawsp01 amzdcawsp01.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "10.192.16.11 AMZDCAWSP02 amzdcawsp02 amzdcawsp02.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "172.16.176.51 smtp.tiffco.net smtp" | sudo tee -a  /etc/hosts > /dev/null

              # NODE SPECIFIC CONFIGURATION
              nodeName=4
              echo "node.name: elasticsearch-prod-datanode-$nodeName" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "node.master: false" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "node.data: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              #Installation and Configuration happened successfully.
              touch /var/tmp/ESSpecificPckgInstalledAndConfigured
            fi

            if [ ${NodesInCluster} -ge 3 ]; then
              # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes. In Test and Staging this value will be 1 and for PROD 2.
              echo "discovery.zen.minimum_master_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "gateway.recover_after_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode1pvtip

              masternode2pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeTwoPvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode2pvtip

              masternode3pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeThreePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode3pvtip

              echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\"", \""$masternode2pvtip\"", \""$masternode3pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
            else
              if [ ${NodesInCluster} -lt 3 ]; then
                # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes. In Test and Staging this value will be 1 and for PROD 2.
                echo "discovery.zen.minimum_master_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                echo "gateway.recover_after_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

                masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
                echo $masternode1pvtip

                echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                fi
            fi

            # Configuration Done, Lets Enable and START the Application
            sudo /bin/systemctl daemon-reload
            sudo systemctl start elasticsearch.service

            reboot
            --//
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}05
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerDataNodeVolume3b:
    Type: AWS::EC2::Volume
    DependsOn:
      - ElasticSearchServerDataNode3a
    Condition: LaunchThreeDataInstance
    Properties:
      AutoEnableIO: true
      AvailabilityZone: !GetAtt ElasticSearchServerDataNode3b.AvailabilityZone
      Encrypted: true
      Size: !Ref ESInstanceVolumeSize
      VolumeType: !Ref ESInstanceVolumeType
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}05/app
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerDataAttachNodeVolume3b:
    Type: AWS::EC2::VolumeAttachment
    DependsOn:
      - ElasticSearchServerDataNode3b
      - ElasticSearchServerDataNodeVolume3b
    Condition: LaunchThreeDataInstance
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref ElasticSearchServerDataNode3b
      VolumeId: !Ref ElasticSearchServerDataNodeVolume3b

  ElasticSearchServerDataNode3c:
    Type: AWS::EC2::Instance
    Condition: LaunchThreeDataInstance
    Properties:
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          DeleteOnTermination: true
          Encrypted: true
          VolumeSize: !Ref ESInstanceVolumeSize
          VolumeType: !Ref ESInstanceVolumeType
      SubnetId: !Ref ESSubnetIds
      ImageId: !Ref ESAmiID
      InstanceType: !Ref ESInstanceType
      SecurityGroupIds:
        - !GetAtt ElasticSearchSecurityGroup.GroupId
      KeyName: !Ref ESKeyPairName
      IamInstanceProfile: !Ref ElasticSearchInstanceProfile
      EbsOptimized: true
      SourceDestCheck: true
      UserData:
        Fn::Base64:
          !Sub |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0

            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]

            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"

            #!/bin/bash -xe
            exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1

            # PRE-REQUISITE INSTALLATION
            cd /tmp
            sudo yum install -y wget dos2unix

            #create elastic search user
            group=elasticsearch
            if grep -q $group /etc/group
            then
              echo "group exists"
            else
              groupadd -g 598 elasticsearch
              useradd -u 997 -g 598 -c "elasticsearch user" -s /sbin/nologin -M elasticsearch
              chage -I -1 -m 0 -M 99999 -E -1 elasticsearch
            fi

            # INSTALLATION OF PACKAGES.
            FILE=/var/tmp/ESGenericPckgInstalled
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Set Timezone
              timedatectl set-timezone ${ESTimeZone}

              cd /tmp
              yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
              yum update -y
              yum install zip unzip bind-utils traceroute lvm2 wget -y
              yum install nvme-cli -y

              # Install SSM Agent
              cd /tmp
              yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              systemctl enable amazon-ssm-agent
              systemctl start amazon-ssm-agent

              #Install AWS CLI
              cd /tmp
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              rm ./awscli-bundle.zip
              rm -rf ./awscli-bundle

              cd /tmp
              #Install cloudwatch monitoring scripts
              yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo="rhui-REGION-rhel-server-optional" -y cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon
              #Enable crontab to send MemoryUtilization metric to cloudWatch.
              #TODO: Comeback: if crontab is empty below command exits script.
              #sudo crontab -l > EsCldWatchCronFile
              echo "*/5 * * * * /tmp/aws-scripts-mon/mon-put-instance-data.pl --mem-used-incl-cache-buff --mem-util --disk-space-util --disk-path=/ --from-cron" >> EsCldWatchCronFile
              sudo crontab EsCldWatchCronFile
              sudo rm EsCldWatchCronFile

              #Install packages for AD
              yum install -y sssd realmd krb5-workstation oddjob oddjob-mkhomedir samba-common-tools

              touch /var/tmp/ESGenericPckgInstalled
            fi

            # USING AWS CLI, PUT AND GET VALUES FROM PARAMETER STORE AND SET HOSTNAME.
            # Set Hostname
            region=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | awk -F\" '{print $(NF-1)}')
            ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            host_name=$(/usr/local/bin/aws ec2 --region "$region" describe-tags --filters Name=resource-id,Values="$ec2_instance_id" Name=key,Values=Name --query Tags[].Value --output text)
            hostnamectl set-hostname "$host_name"
            hostnamectl status
            #To persist the change
            echo "preserve_hostname: true" >> /etc/cloud/cloud.cfg

            # USER AND GROUP CONFIGURATION - OS, ELASTICSEARCH, KIBANA.
            #create users with root privs
            count0=0
            for i in apathros ; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                user_created=$(id -u $i > /dev/null 2>&1; echo $?)
                  if [ $user_created -eq 0 ]; then
                    mkdir -p /home/$i/.ssh
                    touch /home/$i/.ssh/authorized_keys
                    chown -R $i:$i /home/$i/.ssh
                    chmod 700 /home/$i/.ssh
                    chmod 600 /home/$i/.ssh/authorized_keys
                    #echo "$i ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
                    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key" >> /home/apathros/.ssh/authorized_keys

                    chage -I -1 -m 0 -M 99999 -E -1 $i
                    count0=1
                  fi
              else
                echo "user $i does exist."
              fi
            done

            ADMINS=apathros
            #creation of  the  Linux user-accounts with a temporary password.
            user_accounts=${ESUsersList}
            echo "users in user_accounts are $user_accounts"
            IFS=,
            field_separator=$IFS

            count1=0
            for i in $user_accounts; do
              if [ -z "$(getent passwd $i)" ]; then
                echo "user $i does NOT exist."
                useradd -m -G ssh_access $i
                echo "$i:T!emp123" | chpasswd
                passwd -e $i
                ADMINS="$ADMINS,$i"
                count1=1
              else
                echo "user $i exist."
              fi
            done

            if [ $count0 -eq 1 -o $count1 -eq 1 ]; then
              IFS=$field_separator
              echo -e "\nUser_Alias ES_ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "User_Alias ADMINS=$ADMINS" >> /etc/sudoers
              echo -e "ADMINS ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            fi

            #Enable password based Authentication
            #update PasswordAuthentication from No to Yes in /etc/ssh/sshd_config and then restart sshd using systemctl restart sshd

            host_name=$(hostname -s)
            echo "hostname set is $host_name"
            if [ ${Env} == "PROD" ]; then
              srvcAcntName=svc_esprod
              label=$host_name
            else
              if [ ${Env} == "TEST" ]; then
                srvcAcntName=svc_estest
                label=$host_name
              else
                if [ ${Env} == "STG" ]; then
                  srvcAcntName=svc_esstg
                  label=$host_name
                else
                  if [ ${Env} == "DEV" ]; then
                    srvcAcntName=svc_esdev
                    label=$host_name
                  else
                    if [ ${Env} == "QA" ]; then
                      srvcAcntName=svc_esqa
                      label=$host_name
                    fi
                  fi
                fi
              fi
            fi

            #create service account and group
            if grep -q $srvcAcntName /etc/group
            then
              echo "group $srvcAcntName exists"
            else
              groupadd -g 3000 $srvcAcntName
              useradd -u 3000 -g 3000 $srvcAcntName
              chage -I -1 -m 0 -M 99999 -E -1 $srvcAcntName
            fi

            echo -e "\n# Access to $srvcAcntName,elasticsearch accounts" >> /etc/sudoers
            echo -e "$ADMINS ALL=($srvcAcntName,elasticsearch)  ALL" >> /etc/sudoers

            echo -e "\n# Access to administer elasticsearch service" >> /etc/sudoers
            echo -e "$ADMINS  ALL=(root) /usr/bin/systemctl daemon-reload, /usr/bin/systemctl start elasticsearch.service, /usr/bin/systemctl stop elasticsearch.service,  /usr/bin/systemctl status elasticsearch.service, /usr/sbin/service kibana start, /usr/sbin/service kibana stop, /usr/sbin/service kibana status, /usr/share/elasticsearch/bin/elasticsearch-plugin, /usr/share/elasticsearch/bin/x-pack/users, /usr/share/elasticsearch/bin/x-pack/certgen" >> /etc/sudoers

            #operations pertaining to the /app filesystem
            mkdir /app

            app_device=`lsblk | awk '{print $1}'| tail -1`

            if [ "$app_device" = "nvme1n1" ]; then
              mkfs.ext4 /dev/"$app_device"
              e2label /dev/"$app_device" $label
              immutable=`lsattr /etc/fstab | awk -F- '{print $5}'`
              if [ "$immutable" = "i" ]; then chattr -i /etc/fstab ; fi
              lsattr /etc/fstab
              echo "LABEL=$label /app ext4 noatime,rw 1 2" >> /etc/fstab
              mount -a
              chown -R elasticsearch.$srvcAcntName /app
              ls -ld /app
              df -h /app
            else
              echo -e "The app device/volume is "$app_device" when the expected value was nvme1n1. So the filesystem and label were not created on it."
            fi

            FILE=/var/tmp/ESSpecificPckgInstalledAndConfigured
            if [ -f "$FILE" ]; then
              echo "$FILE exist, no need to install packages again"
            else
              # Install ESEARCH.
              sudo yum install -y install java-1.8.0-openjdk
              wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.rpm
              sudo yum install -y elasticsearch-5.5.2.rpm
              sudo /bin/systemctl daemon-reload
              sudo /bin/systemctl enable elasticsearch.service
              sudo sed -i 's/#LimitMEMLOCK/LimitMEMLOCK/g' /usr/lib/systemd/system/elasticsearch.service
              # configure 3g to 30g, due to storage limitation have reduced the size.
              sudo sed -i 's/Xms2g/Xms10g/g' /etc/elasticsearch/jvm.options
              sudo sed -i 's/Xmx2g/Xmx10g/g' /etc/elasticsearch/jvm.options
              {
                echo "#Elasticsearch Specific Settings"
                echo "vm.max_map_count=262144"
                echo "vm.swappiness=1"
              } | sudo tee -a /etc/sysctl.conf > /dev/null
              {
                echo "#Elasticsearch Specific Settings"
                echo "elasticsearch  -  nofile  65536"
                echo "elasticsearch  hard  nproc  65536"
                echo "elasticsearch  soft  nproc  65536"
              } | sudo tee -a /etc/security/limits.conf > /dev/null
              sudo mkdir -p /app/data/lib/elasticsearch
              sudo mkdir -p /app/log/elasticsearch
              sudo chown elasticsearch:$srvcAcntName /etc/elasticsearch/elasticsearch.yml
              cd /app
              sudo chown elasticsearch:$srvcAcntName -R .
              cd /tmp
              wget https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/discovery-ec2/discovery-ec2-5.5.2.zip
              wget https://artifacts.elastic.co/downloads/elasticsearch-plugins/repository-s3/repository-s3-5.5.2.zip

              cd /usr/share/elasticsearch/
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/x-pack-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/discovery-ec2-5.5.2.zip
              sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install --batch file:///tmp/repository-s3-5.5.2.zip

              sudo chown -R elasticsearch:$srvcAcntName /etc/elasticsearch/repository-s3

              # GET ESEARCH CONFIGURATION SCRIPTS FROM S3 BUCKET.
              cd /tmp
              wget https://s3.amazonaws.com/${S3EDHScriptsBucketName}/Elasticsearch/Scripts/elasticsearch-configuration.sh
              dos2unix elasticsearch-configuration.sh
              chmod +x elasticsearch-configuration.sh
              ./elasticsearch-configuration.sh

              # APPLICATION CONFIGURATION.
              ldapbindpswd=$(aws ssm get-parameter --name ${ESParmStrLDAPBindPswd} --region us-east-1 --query "Parameter.Value" --output text)
              echo "LDAP Bind Password: $ldapbindpswd"
              echo "xpack.security.authc.realms.ldap1.bind_password: $ldapbindpswd" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "xpack.security.authc.realms.ldap1.url: [\"ldap://amzdcawsp01:3268\",\"ldap://amzdcawsp02:3268\"]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "10.192.15.11 AMZDCAWSP01 amzdcawsp01 amzdcawsp01.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "10.192.16.11 AMZDCAWSP02 amzdcawsp02 amzdcawsp02.amazon.tiffco.net" | sudo tee -a  /etc/hosts > /dev/null
              echo "172.16.176.51 smtp.tiffco.net smtp" | sudo tee -a  /etc/hosts > /dev/null

              # NODE SPECIFIC CONFIGURATION
              nodeName=5
              echo "node.name: elasticsearch-prod-datanode-$nodeName" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              echo "node.master: false" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "node.data: true" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              #Installation and Configuration happened successfully.
              touch /var/tmp/ESSpecificPckgInstalledAndConfigured
            fi

            if [ ${NodesInCluster} -ge 3 ]; then
              # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes. In Test and Staging this value will be 1 and for PROD 2.
              echo "discovery.zen.minimum_master_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
              echo "gateway.recover_after_nodes: 2" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

              masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode1pvtip

              masternode2pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeTwoPvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode2pvtip

              masternode3pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeThreePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
              echo $masternode3pvtip

              echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\"", \""$masternode2pvtip\"", \""$masternode3pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
            else
              if [ ${NodesInCluster} -lt 3 ]; then
                # Min-Master-Nodes value will be (N/2) + 1, where N is Num of Master Nodes. In Test and Staging this value will be 1 and for PROD 2.
                echo "discovery.zen.minimum_master_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                echo "gateway.recover_after_nodes: 1" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null

                masternode1pvtip=$(aws ssm get-parameter --name ${ESParamStrMasterNodeOnePvtIP} --region us-east-1 --query "Parameter.Value" --output text)
                echo $masternode1pvtip

                echo "discovery.zen.ping.unicast.hosts: [\""$masternode1pvtip\""]" | sudo tee -a /etc/elasticsearch/elasticsearch.yml > /dev/null
                fi
            fi

            # Configuration Done, Lets Enable and START the Application
            sudo /bin/systemctl daemon-reload
            sudo systemctl start elasticsearch.service

            reboot
            --//
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}06
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerDataNodeVolume3c:
    Type: AWS::EC2::Volume
    DependsOn:
      - ElasticSearchServerDataNode3c
    Condition: LaunchThreeDataInstance
    Properties:
      AutoEnableIO: true
      AvailabilityZone: !GetAtt ElasticSearchServerDataNode3c.AvailabilityZone
      Encrypted: true
      Size: !Ref ESInstanceVolumeSize
      VolumeType: !Ref ESInstanceVolumeType
      Tags:
        - Key: Name
          Value: !Sub ${ElasticSearchServerName}06/app
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
  ElasticSearchServerDataAttachNodeVolume3c:
    Type: AWS::EC2::VolumeAttachment
    DependsOn:
      - ElasticSearchServerDataNode3c
      - ElasticSearchServerDataNodeVolume3c
    Condition: LaunchThreeDataInstance
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref ElasticSearchServerDataNode3c
      VolumeId: !Ref ElasticSearchServerDataNodeVolume3c
  ElasticSearchSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: SG for ElasticSearch EC2 instances
      Tags:
        - Key: Name
          Value: !Sub TCO-ES-${Env}
        - Key: Environment
          Value: !Ref Env
        - Key: Vendor
          Value: MontyCloud
        - Key: Application
          Value: !Ref Application
        - Key: !Ref EDHTCOTagKey
          Value: !Ref EDHTCOTagValue
      SecurityGroupIngress:
        - CidrIp: 10.192.11.196/32
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 172.16.0.0/12
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 10.255.0.0/16
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 10.0.0.0/8
          IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
        - CidrIp: 172.16.0.0/12
          IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
        - CidrIp: 10.255.0.0/16
          IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
        - CidrIp: 172.16.0.0/12
          IpProtocol: tcp
          FromPort: 9300
          ToPort: 9300
        - CidrIp: 10.255.0.0/16
          IpProtocol: tcp
          FromPort: 9300
          ToPort: 9300
        - CidrIp: 172.16.0.0/12
          IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
        - CidrIp: 10.255.0.0/16
          IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
Outputs:
  ElasticSearchServerInstancesIPs:
      Value: !Join
        - ','
        - - !If
            - LaunchThreeMasterServerInstance
            - !GetAtt ElasticSearchServerMasterNode1.PrivateIp
            - !Ref 'AWS::NoValue'
          - !If
            - LaunchThreeMasterServerInstance
            - !GetAtt ElasticSearchServerMasterNode2.PrivateIp
            - !Ref 'AWS::NoValue'
          - !If
            - LaunchThreeMasterServerInstance
            - !GetAtt ElasticSearchServerMasterNode3.PrivateIp
            - !Ref 'AWS::NoValue'
          - !If
            - LaunchKibanaNode
            - !GetAtt ElasticSearchKibanaInstance.PrivateIp
            - !Ref 'AWS::NoValue'
          - !If
            - LaunchOneMasterServerInstance
            - !GetAtt ElasticSearchServerMasterNode0.PrivateIp
            - !Ref 'AWS::NoValue'
          - !If
            - LaunchOneDataInstance
            - !GetAtt ElasticSearchServerDataNode1.PrivateIp
            - !Ref 'AWS::NoValue'
          - !If
            - LaunchTwoDataInstance
            - !GetAtt ElasticSearchServerDataNode2a.PrivateIp
            - !Ref 'AWS::NoValue'
          - !If
            - LaunchTwoDataInstance
            - !GetAtt ElasticSearchServerDataNode2b.PrivateIp
            - !Ref 'AWS::NoValue'
          - !If
            - LaunchThreeDataInstance
            - !GetAtt ElasticSearchServerDataNode3a.PrivateIp
            - !Ref 'AWS::NoValue'
          - !If
            - LaunchThreeDataInstance
            - !GetAtt ElasticSearchServerDataNode3b.PrivateIp
            - !Ref 'AWS::NoValue'
          - !If
            - LaunchThreeDataInstance
            - !GetAtt ElasticSearchServerDataNode3c.PrivateIp
            - !Ref 'AWS::NoValue'
  ExpElasticSearchInstanceProfile:
    Description: IAM Insatnce Profile for ESearch Nodes.
    Value: !Ref ElasticSearchInstanceProfile
    Export:
      Name: !Sub '${AWS::StackName}-ElasticSearchInstanceProfile'
  ExpElasticSearchSecurityGroupId:
    Description: VPC Security Group for ElasticSearch Node.
    Value:
      !GetAtt
        - ElasticSearchSecurityGroup
        - GroupId
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupID'
