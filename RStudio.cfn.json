{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Creates the RStudio Stack including EC2 instance, associated Role, Policy, Instance Profile, Security Group, SG Rules, ebs volumes, S3 buckets and their policies",
	"Parameters": {
  	"Environment": {
           "Type": "String",
           "Default": "dev",
           "AllowedValues" : ["dev", "qa", "stg", "prod", "poc"],
           "Description": "The environment in which the resources are to be provisioned"
		},
		"EnableInstanceTerminationProtection": {
			"Type": "String",
			"Default": "true",
			"AllowedValues" : ["true", "false"],
			"Description": "Instance termination protection"
		},
		"VolumeDeleteOnInstanceTermination": {
			"Type": "String",
			"Default": "false",
			"AllowedValues" : ["true", "false"],
			"Description": "Delete EBS Volumes on Instance Termination"
		},
		"Ec2InstanceRoleName": {
			"Type": "String",
			"Default": "Ec2RStudioDevRole",
			"Description": "The name of the ec2 instance role to be created e.g. Ec2RStudioDevRole"
		},
		"AMI": {
			"Type": "AWS::EC2::Image::Id",
			"Default": "ami-0e524e75",
			"Description": "AMI Id , e.g. ami-0e524e75 , ami-d59aa3af"
		},
		"InstanceType": {
			"Type": "String",
			"Description": "EC2 Instance Type , e.g. r5.xlarge"
		},
		"SubnetId": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Subnet Id, e.g. subnet-0bad1c26"
		},
		"Application": {
			"Type": "String",
			"Description": "The value of Tag Key:Application, e.g. RStudio"
		},
		"Hostname": {
			"Type": "String",
			"Description": "The value of Tag Key:Name, e.g. amzrstdev01"
		},
		"OS": {
			"Type": "String",
			"Default": "RedHatLinux",
			"Description": "The value of Tag Key:OS, e.g. RedHatLinux"
		},
		"DailySnapshot": {
			"Type": "String",
			"Default": "True",
			"Description": "The value of Tag Key:Daily-Snapshot, e.g. True"
		},
		"RootVolumeSize": {
			"Type": "Number",
			"Description": "The root volume size in Gigs, eg. 128 "
		},
		"AppVolumeSize": {
			"Type": "Number",
			"Description": "The app volume size in Gigs, eg. 128 "
		},
		"EbsKmsKeyId": {
			"Type": "String",
			"Description": "KMS key to be used to encrypt the volumes"
		},
		"EbsVolumeType": {
			"Type": "String",
			"Description": "EBS Volume Type , e.g. gp2"
		},
		"SecurityGroupIdsDefault": {
			"Type": "List<AWS::EC2::SecurityGroup::Id>",
			"Default": "sg-b503cac9,sg-9a579ce5",
			"Description": "List of default Security Group Ids"
		},
		"SecurityGroup1Name": {
			"Type": "String",
			"Default": "RSTUDIO-DEV",
			"Description": "Security Group to be created for RStudio Instances"
		},
		"SecurityGroup1Description": {
			"Type": "String",
			"Default": "Security Group for RStudio Instance",
			"Description": "Security Group description for RStudio Instances"
		}
	},
	"Mappings": {
		"EnvironmentMap": {
			"dev": { "VpcId": "vpc-6057bd06" ,"SshKey": "TCO-NONPROD" , "InitCap": "Dev" },
			"qa": { "VpcId": "vpc-6057bd06", "SshKey": "TCO-NONPROD", "InitCap": "Qa" }, 
			"poc": { "VpcId": "vpc-6057bd06", "SshKey": "TCO-NONPROD", "InitCap": "Poc" },
			"prod": { "VpcId" :"vpc-f4682392", "SshKey": "TCO-PROD", "InitCap": "Prod" }
		},
		"VolumeResourceDeletionMap": {
			"true": { "Policy" : "Delete" },
			"false": { "Policy" : "Retain" }
		}
	},
	"Conditions" : { 
		"IfProd" : {"Fn::Equals" : [{"Ref" : "Environment"}, "prod"]},
		"IfNotProd" : {"Fn::Not" : [{"Fn::Equals" : [{"Ref" : "Environment"}, "prod" ]}]},
		"IfQa" : {"Fn::Not" : [{"Fn::Equals" : [{"Ref" : "Environment"}, "prod" ]}]}
	},
	"Resources": {
		"Ec2S3AccessIamManagedPolicy": {
			"Type" : "AWS::IAM::ManagedPolicy",
			"Description" : "AWS::IAM::ManagedPolicy",
			"Properties" : {
				"ManagedPolicyName" : { "Fn::Join": ["",  [ "Ec2S3Access",{"Ref" : "Application"},{ "Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"InitCap" ]},"Policy"]]},
				"PolicyDocument" : {
					"Version" : "2012-10-17",
					 "Statement": [ {
						 "Effect"   : "Allow",
						 "Action"   : [ 
							 "s3:PutObject",
							 "s3:GetObject",
							 "s3:ListBucket",
							 "s3:ListObjects"
						 ],
						 "Resource" : [
						   { "Fn::Join": ["-",  [ "arn:aws:s3:::peoplesoft","rstudio",{"Ref" : "Environment"}]]}, 
						   { "Fn::Join": ["-",  [ "arn:aws:s3:::hyperion"  ,"rstudio",{"Ref" : "Environment"}]]},
						   { "Fn::Join": ["-",  [ "arn:aws:s3:::edw"  ,"rstudio",{"Ref" : "Environment"}]]},
						   { "Fn::Join": ["-",  [ "arn:aws:s3:::countwise"  ,"rstudio",{"Ref" : "Environment"}]]},
						   { "Fn::Join": ["-",  [ "arn:aws:s3:::kronos"  ,"rstudio",{"Ref" : "Environment"}]]},
						   { "Fn::Join": ["-",  [ "arn:aws:s3:::generic"  ,"rstudio",{"Ref" : "Environment"}]]},
						   { "Fn::Join": ["-",  [ "arn:aws:s3:::peoplesoft"  ,"rstudio",{ "Fn::Join": ["", [{"Ref" : "Environment"}, "/*"]]}]]},
						   { "Fn::Join": ["-",  [ "arn:aws:s3:::hyperion"  ,"rstudio",{ "Fn::Join": ["", [{"Ref" : "Environment"}, "/*"]]}]]},
						   { "Fn::Join": ["-",  [ "arn:aws:s3:::edw"  ,"rstudio",{ "Fn::Join": ["", [{"Ref" : "Environment"}, "/*"]]}]]},
						   { "Fn::Join": ["-",  [ "arn:aws:s3:::countwise"  ,"rstudio",{ "Fn::Join": ["", [{"Ref" : "Environment"}, "/*"]]}]]},
						   { "Fn::Join": ["-",  [ "arn:aws:s3:::kronos"  ,"rstudio",{ "Fn::Join": ["", [{"Ref" : "Environment"}, "/*"]]}]]},
						   { "Fn::Join": ["-",  [ "arn:aws:s3:::generic"  ,"rstudio",{ "Fn::Join": ["", [{"Ref" : "Environment"}, "/*"]]}]]}
						 ]
					 } ]
				},
      "Roles": [ { "Ref": "IamRole" } ]
			}
		},
		"IamRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": { "Ref": "Ec2InstanceRoleName" },
				"AssumeRolePolicyDocument": {
					"Version" : "2012-10-17",
					"Statement": [ {
						"Effect": "Allow",
						"Principal": {
							"Service": [ "ec2.amazonaws.com" ]
						},
						"Action": [ "sts:AssumeRole" ]
					} ]
				},
				"ManagedPolicyArns": ["arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess",{ "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:policy/TCO_SSM_Policy_For_EC2" },{ "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:policy/EBS_Snapshots"} ]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": [ { "Ref": "IamRole"} ],
				"InstanceProfileName": {"Fn::Join": ["-",  [{ "Ref": "Hostname" } ,{ "Ref": "Ec2InstanceRoleName" }]]}
				}
		},
		"Ec2Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"DisableApiTermination": { "Ref": "EnableInstanceTerminationProtection"},
				"InstanceInitiatedShutdownBehavior": "stop",
				"EbsOptimized": "true",
				"IamInstanceProfile": { "Ref": "InstanceProfile"},
				"ImageId": { "Ref": "AMI"},
				"InstanceType": { "Ref": "InstanceType"},
				"KeyName":  { "Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"SshKey" ]},
				"Monitoring": "false",
				"SecurityGroupIds": {
					"Fn::Split": [ ",", { "Fn::Sub": [ "${SGIdList},${SecurityGroup1}", { "SGIdList": { "Fn::Join": [ ",", { "Ref": "SecurityGroupIdsDefault" } ] } } ] } ]
				},
				"SubnetId": { "Ref": "SubnetId"},
				"Tags": [
				{
					"Key": "Application",
					"Value": { "Ref": "Application"}
				},
				{
					"Key": "Name",
					"Value": { "Ref": "Hostname"}
				},
				{
					"Key": "OS",
					"Value": { "Ref": "OS"}
				},
				{
					"Key": "Daily-Snapshot",
					"Value": { "Ref": "DailySnapshot"}
				}
				],
				"BlockDeviceMappings" : [
					{
						"DeviceName" : "/dev/sda1",
						"Ebs" : {
							"DeleteOnTermination" : { "Ref": "VolumeDeleteOnInstanceTermination" },
							"VolumeType" : { "Ref": "EbsVolumeType" },
							"VolumeSize" : { "Ref": "RootVolumeSize" }
						}
					}
				],
				"UserData" :{ "Fn::Base64" : { "Fn::Join" : ["\n", [
					"#!/bin/bash -xe",
					"exec > >(tee /var/tmp/userdata.log|logger -t userdata ) 2>&1",
					"#create users with root privs",
					"for i in apathros ; do",
					"  useradd -m -G ssh_access $i",
					"  user_created=$(id -u $i > /dev/null 2>&1; echo $?)",
					"   mkdir -p /home/$i/.ssh",
					"   touch /home/$i/.ssh/authorized_keys",
					"   chown -R $i:$i /home/$i/.ssh",
					"   chmod 700 /home/$i/.ssh",
					"   chmod 600 /home/$i/.ssh/authorized_keys",
					"   #echo \"$i ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers",
					"   chage -I -1 -m 0 -M 99999 -E -1 $i",
					"done",
					"  echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs4BND/xthEk7nZdCo6Ksj6eoOs9TW8HUQIz5kkLEvPp14Tn72QPbYOH0Gynv5h1UFEjYHym81ZyOdnAytBF0U3PIfXhEIdsnx7z7qYQUgksu7D9wdkVobDsQcqtXhDlzIZri+pqubqDMWWM5kjVJldhxu3U7mxOM1QG1h9h2Fg2yxV31ub0d6gGuSXJFlX791QzsE8aROe0QXpW8y/BRPwYniHJHfPScl6Fit3R8IfjQV8FEYnfpxcqafR3RlH/d7TxUEtNPh2i7dE19M4CERx0C59Ktv9m3rX6+RKmAfd30OjL6fq00Ly3zpA/QudKZfN5p3wQEfZA89ZCz5Z849 imported-openssh-key\" >> /home/apathros/.ssh/authorized_keys",
					"   echo -e \"\nUser_Alias ADMINS=apathros\" >> /etc/sudoers",
					"   echo -e \"\nADMINS ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers",
					"",
					"# Set Timezone",
					"timedatectl set-timezone America/New_York",
					"",
					"yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional",
					"yum update -y",
					"yum install zip unzip bind-utils traceroute lvm2 wget -y",
					"yum install nvme-cli -y",
					"",
					"",
					"# Install SSM Agent",
					"cd /tmp",
					"yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm",
					"systemctl enable amazon-ssm-agent",
					"systemctl start amazon-ssm-agent",
					"",
					"#Install AWS CLI",
					"cd /tmp",
					"curl \"https://s3.amazonaws.com/aws-cli/awscli-bundle.zip\" -o \"awscli-bundle.zip\"",
					"unzip awscli-bundle.zip",
					"./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws",
					"rm ./awscli-bundle.zip",
					"rm -rf ./awscli-bundle",
					"",
					"#Install cloudwatch monitoring scripts",
					"yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA --enablerepo=\"rhui-REGION-rhel-server-optional\" -y",
					"cd /usr/local/bin ;curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O ; unzip CloudWatchMonitoringScripts-1.2.2.zip && rm CloudWatchMonitoringScripts-1.2.2.zip && cd aws-scripts-mon",
					"",
					"#Install packages for AD",
					"yum install -y sssd realmd krb5-workstation oddjob oddjob-mkhomedir samba-common-tools",
					"# Set Hostname",
					"region=\"us-east-1\"",
					"ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)",
					"host_name=$(/usr/local/bin/aws ec2 --region ${region}  describe-tags --filters Name=resource-id,Values=${ec2_instance_id} Name=key,Values=Name --query Tags[].Value --output text)",
					"hostnamectl set-hostname ${host_name}",
					"hostnamectl status",
					"#To persist the change",
					"echo \"preserve_hostname: true\" >> /etc/cloud/cloud.cfg",
					"reboot" ] ]
				} }
			}
		},
		"AppVolume" : {
			"Type" : "AWS::EC2::Volume",
			"DeletionPolicy" : "Retain",
			"Properties" : {
				"VolumeType" : { "Ref": "EbsVolumeType" },
				"Size" : { "Ref": "AppVolumeSize" },
				"Encrypted": true,
				"KmsKeyId" : { "Ref": "EbsKmsKeyId" },
				"AvailabilityZone" : { "Fn::GetAtt" : [ "Ec2Instance", "AvailabilityZone" ] },
				"Tags" : [ 
          {
            "Key": "Application",
            "Value": { "Ref": "Application" }
          },
          {
            "Key": "Name",
						"Value": {"Fn::Join": ["", [{ "Ref": "Hostname"}, " /app" ]]}
          }
				]
			}
		},
		"MountPoint" : {
			"Type" : "AWS::EC2::VolumeAttachment",
			"Properties" : {
				"InstanceId" : { "Ref" : "Ec2Instance" },
				"VolumeId"  : { "Ref" : "AppVolume" },
				"Device" : "/dev/sdf"
			}
		},     
		"SecurityGroup1": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupName" : { "Ref": "SecurityGroup1Name" },
				"GroupDescription" : {"Fn::Join": [" - ",  [{ "Ref": "SecurityGroup1Description" } , { "Ref": "Environment" }]]},
				"VpcId":  { "Fn::FindInMap" : [ "EnvironmentMap", { "Ref" : "Environment" },"VpcId" ]},
				"Tags": [
				{
					"Key": "Application",
					"Value": { "Ref": "Application" },
					"Key": "Name",
					"Value": { "Ref": "SecurityGroup1Name" }
				}
				]
			}
		},
		"SG1Ingress1": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Fn::GetAtt": [ "SecurityGroup1", "GroupId" ]},
				"IpProtocol": "tcp",
				"FromPort": "8787",
				"ToPort": "8787",
				"CidrIp": "10.160.0.0/16"
			}
		},
		"SG1Ingress2": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId":  { "Fn::GetAtt": [ "SecurityGroup1", "GroupId" ]},
				"IpProtocol": "tcp",
				"FromPort": "8787",
				"ToPort": "8787",
				"CidrIp": "10.255.0.0/16"
			}
		},
		"SG1Ingress3": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Fn::GetAtt": [ "SecurityGroup1", "GroupId" ]},
				"IpProtocol": "tcp",
				"FromPort": "8787",
				"ToPort": "8787",
				"CidrIp": "172.16.0.0/12"
			}
		},
		 "s3peoplesoft": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
				"BucketName" : { "Fn::Join": ["-",  [ "peoplesoft","rstudio",{"Ref" : "Environment"}]]},  
        "LoggingConfiguration": {
					"Fn::If": [
						"IfProd",
						{
							"DestinationBucketName": "amzs3edhprodlogs",
							"LogFilePrefix": "s3logs/"
						},
						{
							"Ref" : "AWS::NoValue"
						}  
					]
				},
        "AccessControl": "Private",
        "VersioningConfiguration": {
          "Status": "Suspended"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": { "Ref": "Application"}
          }
        ]
      }
    },
		 "s3hyperion": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
				"BucketName" : { "Fn::Join": ["-",  [ "hyperion","rstudio",{"Ref" : "Environment"}]]}, 
        "LoggingConfiguration": {
					"Fn::If": [
						"IfProd",
						{
							"DestinationBucketName": "amzs3edhprodlogs",
							"LogFilePrefix": "s3logs/"
						},
						{
							"Ref" : "AWS::NoValue"
						}  
					]
				},
        "AccessControl": "Private",
        "VersioningConfiguration": {
          "Status": "Suspended"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": { "Ref": "Application"}
          }
        ]
      }
    },
		 "s3edw": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
				"BucketName" : { "Fn::Join": ["-",  [ "edw","rstudio",{"Ref" : "Environment"}]]}, 
        "LoggingConfiguration": {
					"Fn::If": [
						"IfProd",
						{
							"DestinationBucketName": "amzs3edhprodlogs",
							"LogFilePrefix": "s3logs/"
						},
						{
							"Ref" : "AWS::NoValue"
						}  
					]
				},
        "AccessControl": "Private",
        "VersioningConfiguration": {
          "Status": "Suspended"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": { "Ref": "Application"}
          }
        ]
      }
    },
		 "s3countwise": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
				"BucketName" : { "Fn::Join": ["-",  [ "countwise"  ,"rstudio",{"Ref" : "Environment"}]]}, 
        "LoggingConfiguration": {
					"Fn::If": [
						"IfProd",
						{
							"DestinationBucketName": "amzs3edhprodlogs",
							"LogFilePrefix": "s3logs/"
						},
						{
							"Ref" : "AWS::NoValue"
						}  
					]
				},
        "AccessControl": "Private",
        "VersioningConfiguration": {
          "Status": "Suspended"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": { "Ref": "Application"}
          }
        ]
      }
    },
		 "s3kronos": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
				"BucketName" : { "Fn::Join": ["-",  [ "kronos"  ,"rstudio",{"Ref" : "Environment"}]]}, 
        "LoggingConfiguration": {
					"Fn::If": [
						"IfProd",
						{
							"DestinationBucketName": "amzs3edhprodlogs",
							"LogFilePrefix": "s3logs/"
						},
						{
							"Ref" : "AWS::NoValue"
						}  
					]
				},
        "AccessControl": "Private",
        "VersioningConfiguration": {
          "Status": "Suspended"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": { "Ref": "Application"}
          }
        ]
      }
    },
		 "s3generic": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
				"BucketName" : { "Fn::Join": ["-",  [ "generic"  ,"rstudio",{"Ref" : "Environment"}]]}, 
        "LoggingConfiguration": {
					"Fn::If": [
						"IfProd",
						{
							"DestinationBucketName": "amzs3edhprodlogs",
							"LogFilePrefix": "s3logs/"
						},
						{
							"Ref" : "AWS::NoValue"
						}  
					]
				},
        "AccessControl": "Private",
        "VersioningConfiguration": {
          "Status": "Suspended"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": { "Ref": "Application"}
          }
        ]
      }
    },
    "s3PolicyPeoplesoft": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "s3peoplesoft"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "PutObjPolicy",
          "Statement": [
            {
              "Sid": "DenyIncorrectEncryptionHeader",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [ "", [{"Fn::GetAtt": [ "s3peoplesoft", "Arn" ]},"/*" ]]
							},
              "Condition": {
                "StringNotEquals": {
                  "s3:x-amz-server-side-encryption": "AES256"
                }
              }
            },
            {
              "Sid": "DenyUnEncryptedObjectUploads",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [ "", [{"Fn::GetAtt": [ "s3peoplesoft", "Arn" ]},"/*" ]]
              },
              "Condition": {
                "Null": {
                  "s3:x-amz-server-side-encryption": "true"
                }
              }
            },
            {
              "Sid": "Access-to-specific-VPCE-only",
              "Effect": "Deny",
              "Principal": "*",
              "Action": [
                "s3:GetObject*",
                "s3:PutObject*",
                "s3:DeleteObject*"
              ],
              "Resource": [
                { "Fn::GetAtt": [ "s3peoplesoft", "Arn" ] },
                { "Fn::Sub": [ "${arn}/*" ,{ "arn" : {"Fn::GetAtt": [ "s3peoplesoft", "Arn" ] } } ] }
              ],
              "Condition": {
                "StringNotEquals": {
                  "aws:sourceVpce": 
										{ "Fn::If" : [
												"IfProd",
													"vpce-8d72bae4",
													["vpce-15c7087c","vpce-f0834f99"]
											]
										}
                }
              }
						}
					]
        }
			}
		},
    "s3PolicyHyperion": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "s3hyperion"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "PutObjPolicy",
          "Statement": [
            {
              "Sid": "DenyIncorrectEncryptionHeader",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [ "", [{"Fn::GetAtt": [ "s3hyperion", "Arn" ]},"/*" ]]
							},
              "Condition": {
                "StringNotEquals": {
                  "s3:x-amz-server-side-encryption": "AES256"
                }
              }
            },
            {
              "Sid": "DenyUnEncryptedObjectUploads",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [ "", [{"Fn::GetAtt": [ "s3hyperion", "Arn" ]},"/*" ]]
              },
              "Condition": {
                "Null": {
                  "s3:x-amz-server-side-encryption": "true"
                }
              }
            },
            {
              "Sid": "Access-to-specific-VPCE-only",
              "Effect": "Deny",
              "Principal": "*",
              "Action": [
                "s3:GetObject*",
                "s3:PutObject*",
                "s3:DeleteObject*"
              ],
              "Resource": [
                { "Fn::GetAtt": [ "s3hyperion", "Arn" ] },
                { "Fn::Sub": [ "${arn}/*" ,{ "arn" : {"Fn::GetAtt": [ "s3hyperion", "Arn" ] } } ] }
              ],
              "Condition": {
                "StringNotEquals": {
                  "aws:sourceVpce":
										{ "Fn::If" : [
												"IfProd",
													"vpce-8d72bae4",
													["vpce-15c7087c","vpce-f0834f99"]
											]
										}
                }
              }
						}
					]
        }
			}
		},
    "s3PolicyEdw": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "s3edw"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "PutObjPolicy",
          "Statement": [
            {
              "Sid": "DenyIncorrectEncryptionHeader",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [ "", [{"Fn::GetAtt": [ "s3edw", "Arn" ]},"/*" ]]
							},
              "Condition": {
                "StringNotEquals": {
                  "s3:x-amz-server-side-encryption": "AES256"
                }
              }
            },
            {
              "Sid": "DenyUnEncryptedObjectUploads",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [ "", [{"Fn::GetAtt": [ "s3edw", "Arn" ]},"/*" ]]
              },
              "Condition": {
                "Null": {
                  "s3:x-amz-server-side-encryption": "true"
                }
              }
            },
            {
              "Sid": "Access-to-specific-VPCE-only",
              "Effect": "Deny",
              "Principal": "*",
              "Action": [
                "s3:GetObject*",
                "s3:PutObject*",
                "s3:DeleteObject*"
              ],
              "Resource": [
                { "Fn::GetAtt": [ "s3edw", "Arn" ] },
                { "Fn::Sub": [ "${arn}/*" ,{ "arn" : {"Fn::GetAtt": [ "s3edw", "Arn" ] } } ] }
              ],
              "Condition": {
                "StringNotEquals": {
                  "aws:sourceVpce":
										{ "Fn::If" : [
												"IfProd",
													"vpce-8d72bae4",
													["vpce-15c7087c","vpce-f0834f99"]
											]
										}
                }
              }
						}
					]
        }
			}
		},
    "s3PolicyCountwise": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "s3countwise"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "PutObjPolicy",
          "Statement": [
            {
              "Sid": "DenyIncorrectEncryptionHeader",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [ "", [{"Fn::GetAtt": [ "s3countwise", "Arn" ]},"/*" ]]
							},
              "Condition": {
                "StringNotEquals": {
                  "s3:x-amz-server-side-encryption": "AES256"
                }
              }
            },
            {
              "Sid": "DenyUnEncryptedObjectUploads",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [ "", [{"Fn::GetAtt": [ "s3countwise", "Arn" ]},"/*" ]]
              },
              "Condition": {
                "Null": {
                  "s3:x-amz-server-side-encryption": "true"
                }
              }
            },
            {
              "Sid": "Access-to-specific-VPCE-only",
              "Effect": "Deny",
              "Principal": "*",
              "Action": [
                "s3:GetObject*",
                "s3:PutObject*",
                "s3:DeleteObject*"
              ],
              "Resource": [
                { "Fn::GetAtt": [ "s3countwise", "Arn" ] },
                { "Fn::Sub": [ "${arn}/*" ,{ "arn" : {"Fn::GetAtt": [ "s3countwise", "Arn" ] } } ] }
              ],
              "Condition": {
                "StringNotEquals": {
                  "aws:sourceVpce":
										{ "Fn::If" : [
												"IfProd",
													"vpce-8d72bae4",
													["vpce-15c7087c","vpce-f0834f99"]
											]
										}
                }
              }
						}
					]
        }
			}
		},
    "s3PolicyKronos": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "s3kronos"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "PutObjPolicy",
          "Statement": [
            {
              "Sid": "DenyIncorrectEncryptionHeader",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [ "", [{"Fn::GetAtt": [ "s3kronos", "Arn" ]},"/*" ]]
							},
              "Condition": {
                "StringNotEquals": {
                  "s3:x-amz-server-side-encryption": "AES256"
                }
              }
            },
            {
              "Sid": "DenyUnEncryptedObjectUploads",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [ "", [{"Fn::GetAtt": [ "s3kronos", "Arn" ]},"/*" ]]
              },
              "Condition": {
                "Null": {
                  "s3:x-amz-server-side-encryption": "true"
                }
              }
            },
            {
              "Sid": "Access-to-specific-VPCE-only",
              "Effect": "Deny",
              "Principal": "*",
              "Action": [
                "s3:GetObject*",
                "s3:PutObject*",
                "s3:DeleteObject*"
              ],
              "Resource": [
                { "Fn::GetAtt": [ "s3kronos", "Arn" ] },
                { "Fn::Sub": [ "${arn}/*" ,{ "arn" : {"Fn::GetAtt": [ "s3kronos", "Arn" ] } } ] }
              ],
              "Condition": {
                "StringNotEquals": {
                  "aws:sourceVpce":
										{ "Fn::If" : [
												"IfProd",
													"vpce-8d72bae4",
													["vpce-15c7087c","vpce-f0834f99"]
												]
										}
                }
              }
						}
					]
        }
			}
		},
    "s3PolicyGeneric": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "s3generic"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "PutObjPolicy",
          "Statement": [
            {
              "Sid": "DenyIncorrectEncryptionHeader",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [ "", [{"Fn::GetAtt": [ "s3generic", "Arn" ]},"/*" ]]
							},
              "Condition": {
                "StringNotEquals": {
                  "s3:x-amz-server-side-encryption": "AES256"
                }
              }
            },
            {
              "Sid": "DenyUnEncryptedObjectUploads",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": {
                "Fn::Join": [ "", [{"Fn::GetAtt": [ "s3generic", "Arn" ]},"/*" ]]
              },
              "Condition": {
                "Null": {
                  "s3:x-amz-server-side-encryption": "true"
                }
              }
            },
            {
              "Sid": "Access-to-specific-VPCE-only",
              "Effect": "Deny",
              "Principal": "*",
              "Action": [
                "s3:GetObject*",
                "s3:PutObject*",
                "s3:DeleteObject*"
              ],
              "Resource": [
                { "Fn::GetAtt": [ "s3generic", "Arn" ] },
                { "Fn::Sub": [ "${arn}/*" ,{ "arn" : {"Fn::GetAtt": [ "s3generic", "Arn" ] } } ] }
              ],
              "Condition": {
                "StringNotEquals": {
                  "aws:sourceVpce":
										{ "Fn::If" : [
												"IfProd",
													"vpce-8d72bae4",
													["vpce-15c7087c","vpce-f0834f99"]
												]
										}
                }
              }
						}
					]
        }
			}
		},
		"Ec2S3AccessIamManagedPolicyQa": {
			"Type" : "AWS::IAM::ManagedPolicy",
			"Condition" : "IfQa",
			"Description" : "AWS::IAM::ManagedPolicy",
			"Properties" : {
				"ManagedPolicyName" : { "Fn::Join": ["",  [ "Ec2S3Access",{"Ref" : "Application"},{ "Fn::FindInMap" : [ "EnvironmentMap", "qa","InitCap" ]},"Policy"]]},
				"PolicyDocument" : {
					"Version" : "2012-10-17",
					"Statement": [ {
						"Effect"   : "Allow",
						"Action"   : [ 
							"s3:PutObject",
						"s3:GetObject",
						"s3:ListBucket",
						"s3:ListObjects"
							],
						"Resource" : [
						{ "Fn::Join": ["-",  [ "arn:aws:s3:::peoplesoft","rstudio","qa"]]}, 
						{ "Fn::Join": ["-",  [ "arn:aws:s3:::hyperion"  ,"rstudio","qa"]]},
						{ "Fn::Join": ["-",  [ "arn:aws:s3:::edw"  ,"rstudio","qa"]]},
						{ "Fn::Join": ["-",  [ "arn:aws:s3:::countwise"  ,"rstudio","qa"]]},
						{ "Fn::Join": ["-",  [ "arn:aws:s3:::kronos"  ,"rstudio","qa"]]},
						{ "Fn::Join": ["-",  [ "arn:aws:s3:::generic"  ,"rstudio","qa"]]},
						{ "Fn::Join": ["-",  [ "arn:aws:s3:::peoplesoft"  ,"rstudio",{ "Fn::Join": ["", ["qa", "/*"]]}]]},
						{ "Fn::Join": ["-",  [ "arn:aws:s3:::hyperion"  ,"rstudio",{ "Fn::Join": ["", ["qa", "/*"]]}]]},
						{ "Fn::Join": ["-",  [ "arn:aws:s3:::edw"  ,"rstudio",{ "Fn::Join": ["", ["qa", "/*"]]}]]},
						{ "Fn::Join": ["-",  [ "arn:aws:s3:::countwise"  ,"rstudio",{ "Fn::Join": ["", ["qa", "/*"]]}]]},
						{ "Fn::Join": ["-",  [ "arn:aws:s3:::kronos"  ,"rstudio",{ "Fn::Join": ["", ["qa", "/*"]]}]]},
						{ "Fn::Join": ["-",  [ "arn:aws:s3:::generic"  ,"rstudio",{ "Fn::Join": ["", ["qa", "/*"]]}]]}
						]
					} ]
				},
				"Roles": [ { "Ref": "IamRole" } ]
			}
		},
		"s3peoplesoftQa": {
			"Type": "AWS::S3::Bucket",
			"Condition" : "IfQa",
			"Properties": {
				"BucketName" : { "Fn::Join": ["-",  [ "peoplesoft","rstudio","qa"]]},  
				"LoggingConfiguration": {
					"Fn::If": [
						"IfProd",
					{
						"DestinationBucketName": "amzs3edhprodlogs",
						"LogFilePrefix": "s3logs/"
					},
					{
						"Ref" : "AWS::NoValue"
					}  
					]
				},
				"AccessControl": "Private",
				"VersioningConfiguration": {
					"Status": "Suspended"
				},
				"Tags": [
				{
					"Key": "Application",
					"Value": { "Ref": "Application"}
				}
				]
			}
		},
		"s3hyperionQa": {
			"Type": "AWS::S3::Bucket",
			"Condition" : "IfQa",
			"Properties": {
				"BucketName" : { "Fn::Join": ["-",  [ "hyperion","rstudio","qa"]]}, 
				"LoggingConfiguration": {
					"Fn::If": [
						"IfProd",
					{
						"DestinationBucketName": "amzs3edhprodlogs",
						"LogFilePrefix": "s3logs/"
					},
					{
						"Ref" : "AWS::NoValue"
					}  
					]
				},
				"AccessControl": "Private",
				"VersioningConfiguration": {
					"Status": "Suspended"
				},
				"Tags": [
				{
					"Key": "Application",
					"Value": { "Ref": "Application"}
				}
				]
			}
		},
		"s3edwQa": {
			"Type": "AWS::S3::Bucket",
			"Condition" : "IfQa",
			"Properties": {
				"BucketName" : { "Fn::Join": ["-",  [ "edw","rstudio","qa"]]}, 
				"LoggingConfiguration": {
					"Fn::If": [
						"IfProd",
					{
						"DestinationBucketName": "amzs3edhprodlogs",
						"LogFilePrefix": "s3logs/"
					},
					{
						"Ref" : "AWS::NoValue"
					}  
					]
				},
				"AccessControl": "Private",
				"VersioningConfiguration": {
					"Status": "Suspended"
				},
				"Tags": [
				{
					"Key": "Application",
					"Value": { "Ref": "Application"}
				}
				]
			}
		},
		"s3countwiseQa": {
			"Type": "AWS::S3::Bucket",
			"Condition" : "IfQa",
			"Properties": {
				"BucketName" : { "Fn::Join": ["-",  [ "countwise"  ,"rstudio","qa"]]}, 
				"LoggingConfiguration": {
					"Fn::If": [
						"IfProd",
					{
						"DestinationBucketName": "amzs3edhprodlogs",
						"LogFilePrefix": "s3logs/"
					},
					{
						"Ref" : "AWS::NoValue"
					}  
					]
				},
				"AccessControl": "Private",
				"VersioningConfiguration": {
					"Status": "Suspended"
				},
				"Tags": [
				{
					"Key": "Application",
					"Value": { "Ref": "Application"}
				}
				]
			}
		},
		"s3kronosQa": {
			"Type": "AWS::S3::Bucket",
			"Condition" : "IfQa",
			"Properties": {
				"BucketName" : { "Fn::Join": ["-",  [ "kronos"  ,"rstudio","qa"]]}, 
				"LoggingConfiguration": {
					"Fn::If": [
						"IfProd",
					{
						"DestinationBucketName": "amzs3edhprodlogs",
						"LogFilePrefix": "s3logs/"
					},
					{
						"Ref" : "AWS::NoValue"
					}  
					]
				},
				"AccessControl": "Private",
				"VersioningConfiguration": {
					"Status": "Suspended"
				},
				"Tags": [
				{
					"Key": "Application",
					"Value": { "Ref": "Application"}
				}
				]
			}
		},
		"s3genericQa": {
			"Type": "AWS::S3::Bucket",
			"Condition" : "IfQa",
			"Properties": {
				"BucketName" : { "Fn::Join": ["-",  [ "generic"  ,"rstudio","qa"]]}, 
				"LoggingConfiguration": {
					"Fn::If": [
						"IfProd",
					{
						"DestinationBucketName": "amzs3edhprodlogs",
						"LogFilePrefix": "s3logs/"
					},
					{
						"Ref" : "AWS::NoValue"
					}  
					]
				},
				"AccessControl": "Private",
				"VersioningConfiguration": {
					"Status": "Suspended"
				},
				"Tags": [
				{
					"Key": "Application",
					"Value": { "Ref": "Application"}
				}
				]
			}
		},
		"s3PolicyPeoplesoftQa": {
			"Type": "AWS::S3::BucketPolicy",
			"Condition" : "IfQa",
			"Properties": {
				"Bucket": {
					"Ref": "s3peoplesoftQa"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Id": "PutObjPolicy",
					"Statement": [
					{
						"Sid": "DenyIncorrectEncryptionHeader",
						"Effect": "Deny",
						"Principal": "*",
						"Action": "s3:PutObject",
						"Resource": {
							"Fn::Join": [ "", [{"Fn::GetAtt": [ "s3peoplesoftQa", "Arn" ]},"/*" ]]
						},
						"Condition": {
							"StringNotEquals": {
								"s3:x-amz-server-side-encryption": "AES256"
							}
						}
					},
					{
						"Sid": "DenyUnEncryptedObjectUploads",
						"Effect": "Deny",
						"Principal": "*",
						"Action": "s3:PutObject",
						"Resource": {
							"Fn::Join": [ "", [{"Fn::GetAtt": [ "s3peoplesoftQa", "Arn" ]},"/*" ]]
						},
						"Condition": {
							"Null": {
								"s3:x-amz-server-side-encryption": "true"
							}
						}
					},
					{
						"Sid": "Access-to-specific-VPCE-only",
						"Effect": "Deny",
						"Principal": "*",
						"Action": [
							"s3:GetObject*",
						"s3:PutObject*",
						"s3:DeleteObject*"
							],
						"Resource": [
						{ "Fn::GetAtt": [ "s3peoplesoftQa", "Arn" ] },
						{ "Fn::Sub": [ "${arn}/*" ,{ "arn" : {"Fn::GetAtt": [ "s3peoplesoftQa", "Arn" ] } } ] }
						],
							"Condition": {
								"StringNotEquals": {
									"aws:sourceVpce":
									{ "Fn::If" : [
										"IfProd",
										"vpce-8d72bae4",
										["vpce-15c7087c","vpce-f0834f99"]
											]
									}
								}
							}
					}
					]
				}
			}
		},
		"s3PolicyHyperionQa": {
			"Type": "AWS::S3::BucketPolicy",
			"Condition" : "IfQa",
			"Properties": {
				"Bucket": {
					"Ref": "s3hyperionQa"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Id": "PutObjPolicy",
					"Statement": [
					{
						"Sid": "DenyIncorrectEncryptionHeader",
						"Effect": "Deny",
						"Principal": "*",
						"Action": "s3:PutObject",
						"Resource": {
							"Fn::Join": [ "", [{"Fn::GetAtt": [ "s3hyperionQa", "Arn" ]},"/*" ]]
						},
						"Condition": {
							"StringNotEquals": {
								"s3:x-amz-server-side-encryption": "AES256"
							}
						}
					},
					{
						"Sid": "DenyUnEncryptedObjectUploads",
						"Effect": "Deny",
						"Principal": "*",
						"Action": "s3:PutObject",
						"Resource": {
							"Fn::Join": [ "", [{"Fn::GetAtt": [ "s3hyperionQa", "Arn" ]},"/*" ]]
						},
						"Condition": {
							"Null": {
								"s3:x-amz-server-side-encryption": "true"
							}
						}
					},
					{
						"Sid": "Access-to-specific-VPCE-only",
						"Effect": "Deny",
						"Principal": "*",
						"Action": [
							"s3:GetObject*",
						"s3:PutObject*",
						"s3:DeleteObject*"
							],
						"Resource": [
						{ "Fn::GetAtt": [ "s3hyperionQa", "Arn" ] },
						{ "Fn::Sub": [ "${arn}/*" ,{ "arn" : {"Fn::GetAtt": [ "s3hyperionQa", "Arn" ] } } ] }
						],
							"Condition": {
								"StringNotEquals": {
									"aws:sourceVpce":
									{ "Fn::If" : [
										"IfProd",
										"vpce-8d72bae4",
										["vpce-15c7087c","vpce-f0834f99"]
											]
									}
								}
							}
					}
					]
				}
			}
		},
		"s3PolicyEdwQa": {
			"Type": "AWS::S3::BucketPolicy",
			"Condition" : "IfQa",
			"Properties": {
				"Bucket": {
					"Ref": "s3edwQa"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Id": "PutObjPolicy",
					"Statement": [
					{
						"Sid": "DenyIncorrectEncryptionHeader",
						"Effect": "Deny",
						"Principal": "*",
						"Action": "s3:PutObject",
						"Resource": {
							"Fn::Join": [ "", [{"Fn::GetAtt": [ "s3edwQa", "Arn" ]},"/*" ]]
						},
						"Condition": {
							"StringNotEquals": {
								"s3:x-amz-server-side-encryption": "AES256"
							}
						}
					},
					{
						"Sid": "DenyUnEncryptedObjectUploads",
						"Effect": "Deny",
						"Principal": "*",
						"Action": "s3:PutObject",
						"Resource": {
							"Fn::Join": [ "", [{"Fn::GetAtt": [ "s3edwQa", "Arn" ]},"/*" ]]
						},
						"Condition": {
							"Null": {
								"s3:x-amz-server-side-encryption": "true"
							}
						}
					},
					{
						"Sid": "Access-to-specific-VPCE-only",
						"Effect": "Deny",
						"Principal": "*",
						"Action": [
							"s3:GetObject*",
						"s3:PutObject*",
						"s3:DeleteObject*"
							],
						"Resource": [
						{ "Fn::GetAtt": [ "s3edwQa", "Arn" ] },
						{ "Fn::Sub": [ "${arn}/*" ,{ "arn" : {"Fn::GetAtt": [ "s3edwQa", "Arn" ] } } ] }
						],
							"Condition": {
								"StringNotEquals": {
									"aws:sourceVpce":
									{ "Fn::If" : [
										"IfProd",
										"vpce-8d72bae4",
										["vpce-15c7087c","vpce-f0834f99"]
											]
									}
								}
							}
					}
					]
				}
			}
		},
		"s3PolicyCountwiseQa": {
			"Type": "AWS::S3::BucketPolicy",
			"Condition" : "IfQa",
			"Properties": {
				"Bucket": {
					"Ref": "s3countwiseQa"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Id": "PutObjPolicy",
					"Statement": [
					{
						"Sid": "DenyIncorrectEncryptionHeader",
						"Effect": "Deny",
						"Principal": "*",
						"Action": "s3:PutObject",
						"Resource": {
							"Fn::Join": [ "", [{"Fn::GetAtt": [ "s3countwiseQa", "Arn" ]},"/*" ]]
						},
						"Condition": {
							"StringNotEquals": {
								"s3:x-amz-server-side-encryption": "AES256"
							}
						}
					},
					{
						"Sid": "DenyUnEncryptedObjectUploads",
						"Effect": "Deny",
						"Principal": "*",
						"Action": "s3:PutObject",
						"Resource": {
							"Fn::Join": [ "", [{"Fn::GetAtt": [ "s3countwiseQa", "Arn" ]},"/*" ]]
						},
						"Condition": {
							"Null": {
								"s3:x-amz-server-side-encryption": "true"
							}
						}
					},
					{
						"Sid": "Access-to-specific-VPCE-only",
						"Effect": "Deny",
						"Principal": "*",
						"Action": [
							"s3:GetObject*",
						"s3:PutObject*",
						"s3:DeleteObject*"
							],
						"Resource": [
						{ "Fn::GetAtt": [ "s3countwiseQa", "Arn" ] },
						{ "Fn::Sub": [ "${arn}/*" ,{ "arn" : {"Fn::GetAtt": [ "s3countwiseQa", "Arn" ] } } ] }
						],
							"Condition": {
								"StringNotEquals": {
									"aws:sourceVpce":
									{ "Fn::If" : [
										"IfProd",
										"vpce-8d72bae4",
										["vpce-15c7087c","vpce-f0834f99"]
											]
									}
								}
							}
					}
					]
				}
			}
		},
		"s3PolicyKronosQa": {
			"Type": "AWS::S3::BucketPolicy",
			"Condition" : "IfQa",
			"Properties": {
				"Bucket": {
					"Ref": "s3kronosQa"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Id": "PutObjPolicy",
					"Statement": [
					{
						"Sid": "DenyIncorrectEncryptionHeader",
						"Effect": "Deny",
						"Principal": "*",
						"Action": "s3:PutObject",
						"Resource": {
							"Fn::Join": [ "", [{"Fn::GetAtt": [ "s3kronosQa", "Arn" ]},"/*" ]]
						},
						"Condition": {
							"StringNotEquals": {
								"s3:x-amz-server-side-encryption": "AES256"
							}
						}
					},
					{
						"Sid": "DenyUnEncryptedObjectUploads",
						"Effect": "Deny",
						"Principal": "*",
						"Action": "s3:PutObject",
						"Resource": {
							"Fn::Join": [ "", [{"Fn::GetAtt": [ "s3kronosQa", "Arn" ]},"/*" ]]
						},
						"Condition": {
							"Null": {
								"s3:x-amz-server-side-encryption": "true"
							}
						}
					},
					{
						"Sid": "Access-to-specific-VPCE-only",
						"Effect": "Deny",
						"Principal": "*",
						"Action": [
							"s3:GetObject*",
						"s3:PutObject*",
						"s3:DeleteObject*"
							],
						"Resource": [
						{ "Fn::GetAtt": [ "s3kronosQa", "Arn" ] },
						{ "Fn::Sub": [ "${arn}/*" ,{ "arn" : {"Fn::GetAtt": [ "s3kronosQa", "Arn" ] } } ] }
						],
							"Condition": {
								"StringNotEquals": {
									"aws:sourceVpce": 
									{ "Fn::If" : [
										"IfProd",
										"vpce-8d72bae4",
										["vpce-15c7087c","vpce-f0834f99"]
											]
									}
								}
							}
					}
					]
				}
			}
		},
		"s3PolicyGenericQa": {
			"Type": "AWS::S3::BucketPolicy",
			"Condition" : "IfQa",
			"Properties": {
				"Bucket": {
					"Ref": "s3genericQa"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Id": "PutObjPolicy",
					"Statement": [
					{
						"Sid": "DenyIncorrectEncryptionHeader",
						"Effect": "Deny",
						"Principal": "*",
						"Action": "s3:PutObject",
						"Resource": {
							"Fn::Join": [ "", [{"Fn::GetAtt": [ "s3genericQa", "Arn" ]},"/*" ]]
						},
						"Condition": {
							"StringNotEquals": {
								"s3:x-amz-server-side-encryption": "AES256"
							}
						}
					},
					{
						"Sid": "DenyUnEncryptedObjectUploads",
						"Effect": "Deny",
						"Principal": "*",
						"Action": "s3:PutObject",
						"Resource": {
							"Fn::Join": [ "", [{"Fn::GetAtt": [ "s3genericQa", "Arn" ]},"/*" ]]
						},
						"Condition": {
							"Null": {
								"s3:x-amz-server-side-encryption": "true"
							}
						}
					},
					{
						"Sid": "Access-to-specific-VPCE-only",
						"Effect": "Deny",
						"Principal": "*",
						"Action": [
							"s3:GetObject*",
						"s3:PutObject*",
						"s3:DeleteObject*"
							],
						"Resource": [
						{ "Fn::GetAtt": [ "s3genericQa", "Arn" ] },
						{ "Fn::Sub": [ "${arn}/*" ,{ "arn" : {"Fn::GetAtt": [ "s3genericQa", "Arn" ] } } ] }
						],
							"Condition": {
								"StringNotEquals": {
									"aws:sourceVpce": 
									{ "Fn::If" : [
										"IfProd",
										"vpce-8d72bae4",
										["vpce-15c7087c","vpce-f0834f99"]
											]
									}
								}
							}
					}
					]
				}
			}
		}
	}
}
